{"id":"../node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","dependencies":[{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js.map","includedInParent":true,"mtime":1595498163436},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\src\\exports_layers.ts","includedInParent":true,"mtime":1595498163436},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\package.json","includedInParent":true,"mtime":1595925880834},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1595498163436},{"name":"./engine/input_layer","loc":{"line":10,"column":27},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\input_layer.js"},{"name":"./engine/topology","loc":{"line":11,"column":22},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\topology.js"},{"name":"./exports","loc":{"line":12,"column":22},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports.js"},{"name":"./layers/advanced_activations","loc":{"line":13,"column":70},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\advanced_activations.js"},{"name":"./layers/convolutional","loc":{"line":14,"column":99},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js"},{"name":"./layers/convolutional_depthwise","loc":{"line":15,"column":32},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js"},{"name":"./layers/core","loc":{"line":16,"column":111},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\core.js"},{"name":"./layers/embeddings","loc":{"line":17,"column":26},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\embeddings.js"},{"name":"./layers/merge","loc":{"line":18,"column":75},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\merge.js"},{"name":"./layers/noise","loc":{"line":19,"column":61},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\noise.js"},{"name":"./layers/normalization","loc":{"line":20,"column":55},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\normalization.js"},{"name":"./layers/padding","loc":{"line":21,"column":30},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\padding.js"},{"name":"./layers/pooling","loc":{"line":22,"column":199},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js"},{"name":"./layers/recurrent","loc":{"line":23,"column":102},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\recurrent.js"},{"name":"./layers/wrappers","loc":{"line":24,"column":47},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\wrappers.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inputLayer = inputLayer;\nexports.elu = elu;\nexports.reLU = reLU;\nexports.leakyReLU = leakyReLU;\nexports.prelu = prelu;\nexports.softmax = softmax;\nexports.thresholdedReLU = thresholdedReLU;\nexports.conv1d = conv1d;\nexports.conv2d = conv2d;\nexports.conv2dTranspose = conv2dTranspose;\nexports.conv3d = conv3d;\nexports.separableConv2d = separableConv2d;\nexports.cropping2D = cropping2D;\nexports.upSampling2d = upSampling2d;\nexports.depthwiseConv2d = depthwiseConv2d;\nexports.activation = activation;\nexports.dense = dense;\nexports.dropout = dropout;\nexports.spatialDropout1d = spatialDropout1d;\nexports.flatten = flatten;\nexports.repeatVector = repeatVector;\nexports.reshape = reshape;\nexports.permute = permute;\nexports.embedding = embedding;\nexports.add = add;\nexports.average = average;\nexports.concatenate = concatenate;\nexports.maximum = maximum;\nexports.minimum = minimum;\nexports.multiply = multiply;\nexports.dot = dot;\nexports.batchNormalization = batchNormalization;\nexports.layerNormalization = layerNormalization;\nexports.zeroPadding2d = zeroPadding2d;\nexports.averagePooling1d = averagePooling1d;\nexports.avgPool1d = avgPool1d;\nexports.avgPooling1d = avgPooling1d;\nexports.averagePooling2d = averagePooling2d;\nexports.avgPool2d = avgPool2d;\nexports.avgPooling2d = avgPooling2d;\nexports.averagePooling3d = averagePooling3d;\nexports.avgPool3d = avgPool3d;\nexports.avgPooling3d = avgPooling3d;\nexports.globalAveragePooling1d = globalAveragePooling1d;\nexports.globalAveragePooling2d = globalAveragePooling2d;\nexports.globalMaxPooling1d = globalMaxPooling1d;\nexports.globalMaxPooling2d = globalMaxPooling2d;\nexports.maxPooling1d = maxPooling1d;\nexports.maxPooling2d = maxPooling2d;\nexports.maxPooling3d = maxPooling3d;\nexports.gru = gru;\nexports.gruCell = gruCell;\nexports.lstm = lstm;\nexports.lstmCell = lstmCell;\nexports.simpleRNN = simpleRNN;\nexports.simpleRNNCell = simpleRNNCell;\nexports.rnn = rnn;\nexports.stackedRNNCells = stackedRNNCells;\nexports.bidirectional = bidirectional;\nexports.timeDistributed = timeDistributed;\nexports.gaussianNoise = gaussianNoise;\nexports.gaussianDropout = gaussianDropout;\nexports.alphaDropout = alphaDropout;\nexports.masking = masking;\nObject.defineProperty(exports, \"Layer\", {\n  enumerable: true,\n  get: function () {\n    return _topology.Layer;\n  }\n});\nObject.defineProperty(exports, \"input\", {\n  enumerable: true,\n  get: function () {\n    return _exports.input;\n  }\n});\nObject.defineProperty(exports, \"RNN\", {\n  enumerable: true,\n  get: function () {\n    return _recurrent.RNN;\n  }\n});\nObject.defineProperty(exports, \"RNNCell\", {\n  enumerable: true,\n  get: function () {\n    return _recurrent.RNNCell;\n  }\n});\nexports.maxPool2d = exports.maxPool1d = exports.globalMaxPool2d = exports.globalMaxPool1d = void 0;\n\nvar _input_layer = require(\"./engine/input_layer\");\n\nvar _topology = require(\"./engine/topology\");\n\nvar _exports = require(\"./exports\");\n\nvar _advanced_activations = require(\"./layers/advanced_activations\");\n\nvar _convolutional = require(\"./layers/convolutional\");\n\nvar _convolutional_depthwise = require(\"./layers/convolutional_depthwise\");\n\nvar _core = require(\"./layers/core\");\n\nvar _embeddings = require(\"./layers/embeddings\");\n\nvar _merge = require(\"./layers/merge\");\n\nvar _noise = require(\"./layers/noise\");\n\nvar _normalization = require(\"./layers/normalization\");\n\nvar _padding = require(\"./layers/padding\");\n\nvar _pooling = require(\"./layers/pooling\");\n\nvar _recurrent = require(\"./layers/recurrent\");\n\nvar _wrappers = require(\"./layers/wrappers\");\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n// Input Layer.\n\n/**\n * An input layer is an entry point into a `tf.LayersModel`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential`` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.predict(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.predict(tf.zeros([1, 3])).print();\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'} */\nfunction inputLayer(args) {\n  return new _input_layer.InputLayer(args);\n} // Advanced Activation Layers.\n\n/**\n * Exponetial Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n */\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\n\n\nfunction elu(args) {\n  return new _advanced_activations.ELU(args);\n}\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\n\n\nfunction reLU(args) {\n  return new _advanced_activations.ReLU(args);\n}\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\n\n\nfunction leakyReLU(args) {\n  return new _advanced_activations.LeakyReLU(args);\n}\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\n\n\nfunction prelu(args) {\n  return new _advanced_activations.PReLU(args);\n}\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\n\n\nfunction softmax(args) {\n  return new _advanced_activations.Softmax(args);\n}\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n */\n\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\n\n\nfunction thresholdedReLU(args) {\n  return new _advanced_activations.ThresholdedReLU(args);\n} // Convolutional Layers.\n\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\n */\n\n\nfunction conv1d(args) {\n  return new _convolutional.Conv1D(args);\n}\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\n\n\nfunction conv2d(args) {\n  return new _convolutional.Conv2D(args);\n}\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\n\n\nfunction conv2dTranspose(args) {\n  return new _convolutional.Conv2DTranspose(args);\n}\n/**\n * 3D convolution layer (e.g. spatial convolution over volumes).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\n * in `dataFormat='channelsLast'`.\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\n\n\nfunction conv3d(args) {\n  return new _convolutional.Conv3D(args);\n}\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\n\n\nfunction separableConv2d(args) {\n  return new _convolutional.SeparableConv2D(args);\n}\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\n\n\nfunction cropping2D(args) {\n  return new _convolutional.Cropping2D(args);\n}\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\n\n\nfunction upSampling2d(args) {\n  return new _convolutional.UpSampling2D(args);\n} // Convolutional(depthwise) Layers.\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\n\n\nfunction depthwiseConv2d(args) {\n  return new _convolutional_depthwise.DepthwiseConv2D(args);\n} // Basic Layers.\n\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\n\n\nfunction activation(args) {\n  return new _core.Activation(args);\n}\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\n\n\nfunction dense(args) {\n  return new _core.Dense(args);\n}\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\n\n\nfunction dropout(args) {\n  return new _core.Dropout(args);\n}\n/**\n * Spatial 1D version of Dropout.\n *\n * This Layer type performs the same function as the Dropout layer, but it drops\n * entire 1D feature maps instead of individual elements. For example, if an\n * input example consists of 3 timesteps and the feature map for each timestep\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\n * elements of the 3rd timestep.\n *\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\n * case in early convolution layers), regular dropout will not regularize the\n * activation and will otherwise just result in merely an effective learning\n * rate decrease. In this case, `spatialDropout1d` will help promote\n * independence among feature maps and should be used instead.\n *\n * **Arguments:**\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\n *     to drop.\n *\n * **Input shape:**\n *   3D tensor with shape `(samples, timesteps, channels)`.\n *\n * **Output shape:**\n *   Same as the input shape.\n *\n * References:\n *   - [Efficient Object Localization Using Convolutional\n *      Networks](https://arxiv.org/abs/1411.4280)\n */\n\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\n\n\nfunction spatialDropout1d(args) {\n  return new _core.SpatialDropout1D(args);\n}\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\n\n\nfunction flatten(args) {\n  return new _core.Flatten(args);\n}\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't see\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\n\n\nfunction repeatVector(args) {\n  return new _core.RepeatVector(args);\n}\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary, although all dimensions in the input shape must be fixed.\n *   Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n */\n\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\n\n\nfunction reshape(args) {\n  return new _core.Reshape(args);\n}\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as the first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\n\n\nfunction permute(args) {\n  return new _core.Permute(args);\n}\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * eg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\n\n\nfunction embedding(args) {\n  return new _embeddings.Embedding(args);\n} // Merge Layers.\n\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\n\n\nfunction add(args) {\n  return new _merge.Add(args);\n}\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\n\n\nfunction average(args) {\n  return new _merge.Average(args);\n}\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\n\n\nfunction concatenate(args) {\n  return new _merge.Concatenate(args);\n}\n/**\n * Layer that computes the element-wise maximum an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\n\n\nfunction maximum(args) {\n  return new _merge.Maximum(args);\n}\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\n\n\nfunction minimum(args) {\n  return new _merge.Minimum(args);\n}\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\n\n\nfunction multiply(args) {\n  return new _merge.Multiply(args);\n}\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\n\n\nfunction dot(args) {\n  return new _merge.Dot(args);\n} // Normalization Layers.\n\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\n\n\nfunction batchNormalization(args) {\n  return new _normalization.BatchNormalization(args);\n}\n/**\n * Layer-normalization layer (Ba et al., 2016).\n *\n * Normalizes the activations of the previous layer for each given example in a\n * batch independently, instead of across a batch like in `batchNormalization`.\n * In other words, this layer applies a transformation that maintanis the mean\n * activation within each example close to0 and activation variance close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\n *   layer in a model.\n *\n * Output shape:\n *   Same as input.\n *\n * References:\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n */\n\n/**\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\n\n\nfunction layerNormalization(args) {\n  return new _normalization.LayerNormalization(args);\n} // Padding Layers.\n\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'} */\n\n\nfunction zeroPadding2d(args) {\n  return new _padding.ZeroPadding2D(args);\n} // Pooling Layers.\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction averagePooling1d(args) {\n  return new _pooling.AveragePooling1D(args);\n}\n\nfunction avgPool1d(args) {\n  return averagePooling1d(args);\n} // For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\n\n\nfunction avgPooling1d(args) {\n  return averagePooling1d(args);\n}\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooleRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooleRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction averagePooling2d(args) {\n  return new _pooling.AveragePooling2D(args);\n}\n\nfunction avgPool2d(args) {\n  return averagePooling2d(args);\n} // For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\n\n\nfunction avgPooling2d(args) {\n  return averagePooling2d(args);\n}\n/**\n * Average pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      4D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction averagePooling3d(args) {\n  return new _pooling.AveragePooling3D(args);\n}\n\nfunction avgPool3d(args) {\n  return averagePooling3d(args);\n} // For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\n\n\nfunction avgPooling3d(args) {\n  return averagePooling3d(args);\n}\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction globalAveragePooling1d(args) {\n  return new _pooling.GlobalAveragePooling1D(args);\n}\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction globalAveragePooling2d(args) {\n  return new _pooling.GlobalAveragePooling2D(args);\n}\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction globalMaxPooling1d(args) {\n  return new _pooling.GlobalMaxPooling1D(args);\n}\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction globalMaxPooling2d(args) {\n  return new _pooling.GlobalMaxPooling2D(args);\n}\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction maxPooling1d(args) {\n  return new _pooling.MaxPooling1D(args);\n}\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooleRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooleRows, pooledCols]`\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction maxPooling2d(args) {\n  return new _pooling.MaxPooling2D(args);\n}\n/**\n * Max pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      5D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n */\n\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\n\n\nfunction maxPooling3d(args) {\n  return new _pooling.MaxPooling3D(args);\n} // Recurrent Layers.\n\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\n\n\nfunction gru(args) {\n  return new _recurrent.GRU(args);\n}\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\n\n\nfunction gruCell(args) {\n  return new _recurrent.GRUCell(args);\n}\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\n\n\nfunction lstm(args) {\n  return new _recurrent.LSTM(args);\n}\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\n\n\nfunction lstmCell(args) {\n  return new _recurrent.LSTMCell(args);\n}\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\n\n\nfunction simpleRNN(args) {\n  return new _recurrent.SimpleRNN(args);\n}\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\n\n\nfunction simpleRNNCell(args) {\n  return new _recurrent.SimpleRNNCell(args);\n}\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to conditon the cell transformation on additional static inputs\n *   (not changing over time), a.k.a an attention mechanism.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\n\n\nfunction rnn(args) {\n  return new _recurrent.RNN(args);\n}\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\n\n\nfunction stackedRNNCells(args) {\n  return new _recurrent.StackedRNNCells(args);\n} // Wrapper Layers.\n\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\n\n\nfunction bidirectional(args) {\n  return new _wrappers.Bidirectional(args);\n}\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n */\n\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\n\n\nfunction timeDistributed(args) {\n  return new _wrappers.TimeDistributed(args);\n} // Aliases for pooling.\n\n\nconst globalMaxPool1d = globalMaxPooling1d;\nexports.globalMaxPool1d = globalMaxPool1d;\nconst globalMaxPool2d = globalMaxPooling2d;\nexports.globalMaxPool2d = globalMaxPool2d;\nconst maxPool1d = maxPooling1d;\nexports.maxPool1d = maxPool1d;\nconst maxPool2d = maxPooling2d;\nexports.maxPool2d = maxPool2d;\n\n/**\n * Apply additive zero-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * This is useful to mitigate overfitting\n * (you could see it as a form of random data augmentation).\n * Gaussian Noise (GS) is a natural choice as corruption process\n * for real valued inputs.\n *\n * # Arguments\n *     stddev: float, standard deviation of the noise distribution.\n *\n * # Input shape\n *         Arbitrary. Use the keyword argument `input_shape`\n *         (tuple of integers, does not include the samples axis)\n *         when using this layer as the first layer in a model.\n *\n * # Output shape\n *         Same shape as input.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nfunction gaussianNoise(args) {\n  return new _noise.GaussianNoise(args);\n}\n/**\n * Apply multiplicative 1-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n */\n\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\n\n\nfunction gaussianDropout(args) {\n  return new _noise.GaussianDropout(args);\n}\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\n\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\n\n\nfunction alphaDropout(args) {\n  return new _noise.AlphaDropout(args);\n}\n/**\n * Masks a sequence by using a mask value to skip timesteps.\n *\n * If all features for a given sample timestep are equal to `mask_value`,\n * then the sample timestep will be masked (skipped) in all downstream layers\n * (as long as they support masking).\n *\n * If any downstream layer does not support masking yet receives such\n * an input mask, an exception will be raised.\n *\n * Arguments:\n *   - `maskValue`: Either None or mask value to skip.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n */\n\n/** @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'} */\n\n\nfunction masking(args) {\n  return new _core.Masking(args);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":96,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":98,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":100,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":102,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":104,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":106,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":108,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":110,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":112,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":114,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":116,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":118,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":120,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":122,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":124,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":126,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":135,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":136,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":137,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":31,"column":0},"generated":{"line":138,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":140,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":64,"column":0},"generated":{"line":173,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":65,"column":6},"generated":{"line":174,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":65,"column":16},"generated":{"line":174,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":65,"column":6},"generated":{"line":174,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":65,"column":27},"generated":{"line":174,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":65,"column":6},"generated":{"line":174,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":65,"column":47},"generated":{"line":174,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":2},"generated":{"line":175,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":9},"generated":{"line":175,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":13},"generated":{"line":175,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":9},"generated":{"line":175,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":24},"generated":{"line":175,"column":37}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":9},"generated":{"line":175,"column":41}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":66,"column":2},"generated":{"line":175,"column":42}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":176,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":176,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":71,"column":0},"generated":{"line":178,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":89,"column":0},"generated":{"line":197,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":206,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":96,"column":16},"generated":{"line":206,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":206,"column":12}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":96,"column":20},"generated":{"line":206,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":206,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":96,"column":39},"generated":{"line":206,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":207,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":9},"generated":{"line":207,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":13},"generated":{"line":207,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":9},"generated":{"line":207,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":17},"generated":{"line":207,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":9},"generated":{"line":207,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":207,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":208,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":100,"column":0},"generated":{"line":209,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":111,"column":0},"generated":{"line":221,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":6},"generated":{"line":230,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":16},"generated":{"line":230,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":6},"generated":{"line":230,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":21},"generated":{"line":230,"column":14}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":6},"generated":{"line":230,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":41},"generated":{"line":230,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":2},"generated":{"line":231,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":9},"generated":{"line":231,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":13},"generated":{"line":231,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":9},"generated":{"line":231,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":18},"generated":{"line":231,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":9},"generated":{"line":231,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":2},"generated":{"line":231,"column":45}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":232,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":122,"column":0},"generated":{"line":233,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":136,"column":0},"generated":{"line":248,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":6},"generated":{"line":257,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":16},"generated":{"line":257,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":6},"generated":{"line":257,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":26},"generated":{"line":257,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":6},"generated":{"line":257,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":51},"generated":{"line":257,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":2},"generated":{"line":258,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":9},"generated":{"line":258,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":13},"generated":{"line":258,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":9},"generated":{"line":258,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":23},"generated":{"line":258,"column":45}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":9},"generated":{"line":258,"column":49}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":144,"column":2},"generated":{"line":258,"column":50}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":145,"column":1},"generated":{"line":259,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":147,"column":0},"generated":{"line":260,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":162,"column":0},"generated":{"line":276,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":169,"column":6},"generated":{"line":285,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":169,"column":16},"generated":{"line":285,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":169,"column":6},"generated":{"line":285,"column":14}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":169,"column":22},"generated":{"line":285,"column":15}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":169,"column":6},"generated":{"line":285,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":169,"column":43},"generated":{"line":285,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":2},"generated":{"line":286,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":9},"generated":{"line":286,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":13},"generated":{"line":286,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":9},"generated":{"line":286,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":19},"generated":{"line":286,"column":41}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":9},"generated":{"line":286,"column":45}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":170,"column":2},"generated":{"line":286,"column":46}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":171,"column":1},"generated":{"line":287,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":173,"column":0},"generated":{"line":288,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":183,"column":0},"generated":{"line":299,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":190,"column":6},"generated":{"line":308,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":190,"column":16},"generated":{"line":308,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":190,"column":6},"generated":{"line":308,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":190,"column":24},"generated":{"line":308,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":190,"column":6},"generated":{"line":308,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":190,"column":47},"generated":{"line":308,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":2},"generated":{"line":309,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":9},"generated":{"line":309,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":13},"generated":{"line":309,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":9},"generated":{"line":309,"column":42}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":21},"generated":{"line":309,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":9},"generated":{"line":309,"column":47}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":191,"column":2},"generated":{"line":309,"column":48}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":192,"column":1},"generated":{"line":310,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":194,"column":0},"generated":{"line":311,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":212,"column":0},"generated":{"line":330,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":219,"column":6},"generated":{"line":339,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":219,"column":16},"generated":{"line":339,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":219,"column":6},"generated":{"line":339,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":219,"column":32},"generated":{"line":339,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":219,"column":6},"generated":{"line":339,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":219,"column":63},"generated":{"line":339,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":2},"generated":{"line":340,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":9},"generated":{"line":340,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":13},"generated":{"line":340,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":9},"generated":{"line":340,"column":50}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":29},"generated":{"line":340,"column":51}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":9},"generated":{"line":340,"column":55}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":220,"column":2},"generated":{"line":340,"column":56}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":221,"column":1},"generated":{"line":341,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":223,"column":0},"generated":{"line":341,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":225,"column":0},"generated":{"line":343,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":243,"column":0},"generated":{"line":362,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":246,"column":6},"generated":{"line":367,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":246,"column":16},"generated":{"line":367,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":246,"column":6},"generated":{"line":367,"column":15}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":246,"column":23},"generated":{"line":367,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":246,"column":6},"generated":{"line":367,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":246,"column":42},"generated":{"line":367,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":2},"generated":{"line":368,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":9},"generated":{"line":368,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":13},"generated":{"line":368,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":9},"generated":{"line":368,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":20},"generated":{"line":368,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":9},"generated":{"line":368,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":247,"column":2},"generated":{"line":368,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":248,"column":1},"generated":{"line":369,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":250,"column":0},"generated":{"line":370,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":266,"column":0},"generated":{"line":387,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":269,"column":6},"generated":{"line":392,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":269,"column":16},"generated":{"line":392,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":269,"column":6},"generated":{"line":392,"column":15}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":269,"column":23},"generated":{"line":392,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":269,"column":6},"generated":{"line":392,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":269,"column":42},"generated":{"line":392,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":2},"generated":{"line":393,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":9},"generated":{"line":393,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":13},"generated":{"line":393,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":9},"generated":{"line":393,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":20},"generated":{"line":393,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":9},"generated":{"line":393,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":270,"column":2},"generated":{"line":393,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":271,"column":1},"generated":{"line":394,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":273,"column":0},"generated":{"line":395,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":306,"column":0},"generated":{"line":429,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":309,"column":6},"generated":{"line":434,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":309,"column":16},"generated":{"line":434,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":309,"column":6},"generated":{"line":434,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":309,"column":32},"generated":{"line":434,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":309,"column":6},"generated":{"line":434,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":309,"column":51},"generated":{"line":434,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":2},"generated":{"line":435,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":9},"generated":{"line":435,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":13},"generated":{"line":435,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":9},"generated":{"line":435,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":29},"generated":{"line":435,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":9},"generated":{"line":435,"column":48}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":310,"column":2},"generated":{"line":435,"column":49}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":311,"column":1},"generated":{"line":436,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":313,"column":0},"generated":{"line":437,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":329,"column":0},"generated":{"line":454,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":332,"column":6},"generated":{"line":459,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":332,"column":16},"generated":{"line":459,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":332,"column":6},"generated":{"line":459,"column":15}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":332,"column":23},"generated":{"line":459,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":332,"column":6},"generated":{"line":459,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":332,"column":42},"generated":{"line":459,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":2},"generated":{"line":460,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":9},"generated":{"line":460,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":13},"generated":{"line":460,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":9},"generated":{"line":460,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":20},"generated":{"line":460,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":9},"generated":{"line":460,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":333,"column":2},"generated":{"line":460,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":334,"column":1},"generated":{"line":461,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":336,"column":0},"generated":{"line":462,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":363,"column":0},"generated":{"line":490,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":366,"column":6},"generated":{"line":495,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":366,"column":16},"generated":{"line":495,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":366,"column":6},"generated":{"line":495,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":366,"column":32},"generated":{"line":495,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":366,"column":6},"generated":{"line":495,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":366,"column":60},"generated":{"line":495,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":2},"generated":{"line":496,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":9},"generated":{"line":496,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":13},"generated":{"line":496,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":9},"generated":{"line":496,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":29},"generated":{"line":496,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":9},"generated":{"line":496,"column":48}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":367,"column":2},"generated":{"line":496,"column":49}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":368,"column":1},"generated":{"line":497,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":370,"column":0},"generated":{"line":498,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":399,"column":0},"generated":{"line":528,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":402,"column":6},"generated":{"line":533,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":402,"column":16},"generated":{"line":533,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":402,"column":6},"generated":{"line":533,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":402,"column":27},"generated":{"line":533,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":402,"column":6},"generated":{"line":533,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":402,"column":52},"generated":{"line":533,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":2},"generated":{"line":534,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":9},"generated":{"line":534,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":13},"generated":{"line":534,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":9},"generated":{"line":534,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":24},"generated":{"line":534,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":9},"generated":{"line":534,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":403,"column":2},"generated":{"line":534,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":404,"column":1},"generated":{"line":535,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":406,"column":0},"generated":{"line":536,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":428,"column":0},"generated":{"line":559,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":431,"column":6},"generated":{"line":564,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":431,"column":16},"generated":{"line":564,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":431,"column":6},"generated":{"line":564,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":431,"column":29},"generated":{"line":564,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":431,"column":6},"generated":{"line":564,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":431,"column":56},"generated":{"line":564,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":2},"generated":{"line":565,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":9},"generated":{"line":565,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":13},"generated":{"line":565,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":9},"generated":{"line":565,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":26},"generated":{"line":565,"column":41}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":9},"generated":{"line":565,"column":45}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":432,"column":2},"generated":{"line":565,"column":46}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":433,"column":1},"generated":{"line":566,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":435,"column":0},"generated":{"line":566,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":437,"column":0},"generated":{"line":568,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":445,"column":0},"generated":{"line":577,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":448,"column":6},"generated":{"line":582,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":448,"column":16},"generated":{"line":582,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":448,"column":6},"generated":{"line":582,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":448,"column":32},"generated":{"line":582,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":448,"column":6},"generated":{"line":582,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":448,"column":62},"generated":{"line":582,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":2},"generated":{"line":583,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":9},"generated":{"line":583,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":13},"generated":{"line":583,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":9},"generated":{"line":583,"column":53}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":29},"generated":{"line":583,"column":54}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":9},"generated":{"line":583,"column":58}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":449,"column":2},"generated":{"line":583,"column":59}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":450,"column":1},"generated":{"line":584,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":452,"column":0},"generated":{"line":584,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":454,"column":0},"generated":{"line":586,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":483,"column":0},"generated":{"line":616,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":486,"column":6},"generated":{"line":621,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":486,"column":16},"generated":{"line":621,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":486,"column":6},"generated":{"line":621,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":486,"column":27},"generated":{"line":621,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":486,"column":6},"generated":{"line":621,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":486,"column":52},"generated":{"line":621,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":2},"generated":{"line":622,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":9},"generated":{"line":622,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":13},"generated":{"line":622,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":9},"generated":{"line":622,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":24},"generated":{"line":622,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":9},"generated":{"line":622,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":487,"column":2},"generated":{"line":622,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":488,"column":1},"generated":{"line":623,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":490,"column":0},"generated":{"line":624,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":521,"column":0},"generated":{"line":656,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":522,"column":6},"generated":{"line":659,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":522,"column":16},"generated":{"line":659,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":522,"column":6},"generated":{"line":659,"column":14}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":522,"column":22},"generated":{"line":659,"column":15}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":522,"column":6},"generated":{"line":659,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":522,"column":42},"generated":{"line":659,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":2},"generated":{"line":660,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":9},"generated":{"line":660,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":13},"generated":{"line":660,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":9},"generated":{"line":660,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":19},"generated":{"line":660,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":9},"generated":{"line":660,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":523,"column":2},"generated":{"line":660,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":524,"column":1},"generated":{"line":661,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":526,"column":0},"generated":{"line":662,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":534,"column":0},"generated":{"line":671,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":535,"column":6},"generated":{"line":674,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":535,"column":16},"generated":{"line":674,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":535,"column":6},"generated":{"line":674,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":535,"column":24},"generated":{"line":674,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":535,"column":6},"generated":{"line":674,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":535,"column":46},"generated":{"line":674,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":2},"generated":{"line":675,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":9},"generated":{"line":675,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":13},"generated":{"line":675,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":9},"generated":{"line":675,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":21},"generated":{"line":675,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":9},"generated":{"line":675,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":536,"column":2},"generated":{"line":675,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":537,"column":1},"generated":{"line":676,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":539,"column":0},"generated":{"line":677,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":569,"column":0},"generated":{"line":708,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":570,"column":6},"generated":{"line":711,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":570,"column":16},"generated":{"line":711,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":570,"column":6},"generated":{"line":711,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":570,"column":33},"generated":{"line":711,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":570,"column":6},"generated":{"line":711,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":570,"column":66},"generated":{"line":711,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":2},"generated":{"line":712,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":9},"generated":{"line":712,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":13},"generated":{"line":712,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":9},"generated":{"line":712,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":30},"generated":{"line":712,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":9},"generated":{"line":712,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":571,"column":2},"generated":{"line":712,"column":41}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":572,"column":1},"generated":{"line":713,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":574,"column":0},"generated":{"line":714,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":591,"column":0},"generated":{"line":732,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":592,"column":6},"generated":{"line":735,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":592,"column":16},"generated":{"line":735,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":592,"column":6},"generated":{"line":735,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":592,"column":24},"generated":{"line":735,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":592,"column":6},"generated":{"line":735,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":592,"column":47},"generated":{"line":735,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":2},"generated":{"line":736,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":9},"generated":{"line":736,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":13},"generated":{"line":736,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":9},"generated":{"line":736,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":21},"generated":{"line":736,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":9},"generated":{"line":736,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":593,"column":2},"generated":{"line":736,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":594,"column":1},"generated":{"line":737,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":596,"column":0},"generated":{"line":738,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":608,"column":0},"generated":{"line":751,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":609,"column":6},"generated":{"line":754,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":609,"column":16},"generated":{"line":754,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":609,"column":6},"generated":{"line":754,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":609,"column":29},"generated":{"line":754,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":609,"column":6},"generated":{"line":754,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":609,"column":56},"generated":{"line":754,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":2},"generated":{"line":755,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":9},"generated":{"line":755,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":13},"generated":{"line":755,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":9},"generated":{"line":755,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":26},"generated":{"line":755,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":9},"generated":{"line":755,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":610,"column":2},"generated":{"line":755,"column":37}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":611,"column":1},"generated":{"line":756,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":613,"column":0},"generated":{"line":757,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":634,"column":0},"generated":{"line":779,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":635,"column":6},"generated":{"line":782,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":635,"column":16},"generated":{"line":782,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":635,"column":6},"generated":{"line":782,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":635,"column":24},"generated":{"line":782,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":635,"column":6},"generated":{"line":782,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":635,"column":46},"generated":{"line":782,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":2},"generated":{"line":783,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":9},"generated":{"line":783,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":13},"generated":{"line":783,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":9},"generated":{"line":783,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":21},"generated":{"line":783,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":9},"generated":{"line":783,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":636,"column":2},"generated":{"line":783,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":637,"column":1},"generated":{"line":784,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":639,"column":0},"generated":{"line":785,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":665,"column":0},"generated":{"line":812,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":666,"column":6},"generated":{"line":815,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":666,"column":16},"generated":{"line":815,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":666,"column":6},"generated":{"line":815,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":666,"column":24},"generated":{"line":815,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":666,"column":6},"generated":{"line":815,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":666,"column":46},"generated":{"line":815,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":2},"generated":{"line":816,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":9},"generated":{"line":816,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":13},"generated":{"line":816,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":9},"generated":{"line":816,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":21},"generated":{"line":816,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":9},"generated":{"line":816,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":667,"column":2},"generated":{"line":816,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":668,"column":1},"generated":{"line":817,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":670,"column":0},"generated":{"line":818,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":679,"column":0},"generated":{"line":828,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":680,"column":6},"generated":{"line":831,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":680,"column":16},"generated":{"line":831,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":680,"column":6},"generated":{"line":831,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":680,"column":26},"generated":{"line":831,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":680,"column":6},"generated":{"line":831,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":680,"column":50},"generated":{"line":831,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":2},"generated":{"line":832,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":9},"generated":{"line":832,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":13},"generated":{"line":832,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":9},"generated":{"line":832,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":23},"generated":{"line":832,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":9},"generated":{"line":832,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":681,"column":2},"generated":{"line":832,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":682,"column":1},"generated":{"line":833,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":684,"column":0},"generated":{"line":833,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":686,"column":0},"generated":{"line":835,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":704,"column":0},"generated":{"line":854,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":705,"column":6},"generated":{"line":857,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":705,"column":16},"generated":{"line":857,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":705,"column":6},"generated":{"line":857,"column":12}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":705,"column":20},"generated":{"line":857,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":705,"column":6},"generated":{"line":857,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":705,"column":36},"generated":{"line":857,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":2},"generated":{"line":858,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":9},"generated":{"line":858,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":13},"generated":{"line":858,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":9},"generated":{"line":858,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":17},"generated":{"line":858,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":9},"generated":{"line":858,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":706,"column":2},"generated":{"line":858,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":707,"column":1},"generated":{"line":859,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":709,"column":0},"generated":{"line":860,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":725,"column":0},"generated":{"line":877,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":726,"column":6},"generated":{"line":880,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":726,"column":16},"generated":{"line":880,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":726,"column":6},"generated":{"line":880,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":726,"column":24},"generated":{"line":880,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":726,"column":6},"generated":{"line":880,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":726,"column":40},"generated":{"line":880,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":2},"generated":{"line":881,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":9},"generated":{"line":881,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":13},"generated":{"line":881,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":9},"generated":{"line":881,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":21},"generated":{"line":881,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":9},"generated":{"line":881,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":727,"column":2},"generated":{"line":881,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":728,"column":1},"generated":{"line":882,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":730,"column":0},"generated":{"line":883,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":748,"column":0},"generated":{"line":902,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":749,"column":6},"generated":{"line":905,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":749,"column":16},"generated":{"line":905,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":749,"column":6},"generated":{"line":905,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":749,"column":28},"generated":{"line":905,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":749,"column":6},"generated":{"line":905,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":749,"column":55},"generated":{"line":905,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":2},"generated":{"line":906,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":9},"generated":{"line":906,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":13},"generated":{"line":906,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":9},"generated":{"line":906,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":25},"generated":{"line":906,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":9},"generated":{"line":906,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":750,"column":2},"generated":{"line":906,"column":37}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":751,"column":1},"generated":{"line":907,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":753,"column":0},"generated":{"line":908,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":769,"column":0},"generated":{"line":925,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":6},"generated":{"line":928,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":16},"generated":{"line":928,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":6},"generated":{"line":928,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":24},"generated":{"line":928,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":6},"generated":{"line":928,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":40},"generated":{"line":928,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":2},"generated":{"line":929,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":9},"generated":{"line":929,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":13},"generated":{"line":929,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":9},"generated":{"line":929,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":21},"generated":{"line":929,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":9},"generated":{"line":929,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":771,"column":2},"generated":{"line":929,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":772,"column":1},"generated":{"line":930,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":774,"column":0},"generated":{"line":931,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":790,"column":0},"generated":{"line":948,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":6},"generated":{"line":951,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":16},"generated":{"line":951,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":6},"generated":{"line":951,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":24},"generated":{"line":951,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":6},"generated":{"line":951,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":40},"generated":{"line":951,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":2},"generated":{"line":952,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":9},"generated":{"line":952,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":13},"generated":{"line":952,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":9},"generated":{"line":952,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":21},"generated":{"line":952,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":9},"generated":{"line":952,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":2},"generated":{"line":952,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":793,"column":1},"generated":{"line":953,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":795,"column":0},"generated":{"line":954,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":812,"column":0},"generated":{"line":972,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":813,"column":6},"generated":{"line":975,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":813,"column":16},"generated":{"line":975,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":813,"column":6},"generated":{"line":975,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":813,"column":25},"generated":{"line":975,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":813,"column":6},"generated":{"line":975,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":813,"column":41},"generated":{"line":975,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":2},"generated":{"line":976,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":9},"generated":{"line":976,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":13},"generated":{"line":976,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":9},"generated":{"line":976,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":22},"generated":{"line":976,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":9},"generated":{"line":976,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":2},"generated":{"line":976,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":815,"column":1},"generated":{"line":977,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":817,"column":0},"generated":{"line":978,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":837,"column":0},"generated":{"line":999,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":838,"column":6},"generated":{"line":1002,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":838,"column":16},"generated":{"line":1002,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":838,"column":6},"generated":{"line":1002,"column":12}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":838,"column":20},"generated":{"line":1002,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":838,"column":6},"generated":{"line":1002,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":838,"column":38},"generated":{"line":1002,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":2},"generated":{"line":1003,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":9},"generated":{"line":1003,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":13},"generated":{"line":1003,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":9},"generated":{"line":1003,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":17},"generated":{"line":1003,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":9},"generated":{"line":1003,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":839,"column":2},"generated":{"line":1003,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":840,"column":1},"generated":{"line":1004,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":842,"column":0},"generated":{"line":1004,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":844,"column":0},"generated":{"line":1006,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":863,"column":0},"generated":{"line":1026,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":866,"column":6},"generated":{"line":1031,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":866,"column":16},"generated":{"line":1031,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":866,"column":6},"generated":{"line":1031,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":866,"column":35},"generated":{"line":1031,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":866,"column":6},"generated":{"line":1031,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":866,"column":69},"generated":{"line":1031,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":2},"generated":{"line":1032,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":9},"generated":{"line":1032,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":13},"generated":{"line":1032,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":9},"generated":{"line":1032,"column":46}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":32},"generated":{"line":1032,"column":47}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":9},"generated":{"line":1032,"column":51}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":2},"generated":{"line":1032,"column":52}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":868,"column":1},"generated":{"line":1033,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":870,"column":0},"generated":{"line":1034,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":888,"column":0},"generated":{"line":1053,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":6},"generated":{"line":1058,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":16},"generated":{"line":1058,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":6},"generated":{"line":1058,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":35},"generated":{"line":1058,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":6},"generated":{"line":1058,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":69},"generated":{"line":1058,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":2},"generated":{"line":1059,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":9},"generated":{"line":1059,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":13},"generated":{"line":1059,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":9},"generated":{"line":1059,"column":46}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":32},"generated":{"line":1059,"column":47}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":9},"generated":{"line":1059,"column":51}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":2},"generated":{"line":1059,"column":52}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":893,"column":1},"generated":{"line":1060,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":895,"column":0},"generated":{"line":1060,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":897,"column":0},"generated":{"line":1062,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":917,"column":0},"generated":{"line":1083,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":918,"column":6},"generated":{"line":1086,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":918,"column":16},"generated":{"line":1086,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":918,"column":6},"generated":{"line":1086,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":918,"column":30},"generated":{"line":1086,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":918,"column":6},"generated":{"line":1086,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":918,"column":59},"generated":{"line":1086,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":2},"generated":{"line":1087,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":9},"generated":{"line":1087,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":13},"generated":{"line":1087,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":9},"generated":{"line":1087,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":27},"generated":{"line":1087,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":9},"generated":{"line":1087,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":2},"generated":{"line":1087,"column":41}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":920,"column":1},"generated":{"line":1088,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":922,"column":0},"generated":{"line":1088,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":924,"column":0},"generated":{"line":1090,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":933,"column":0},"generated":{"line":1100,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":934,"column":6},"generated":{"line":1103,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":934,"column":16},"generated":{"line":1103,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":934,"column":6},"generated":{"line":1103,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":934,"column":33},"generated":{"line":1103,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":934,"column":6},"generated":{"line":1103,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":934,"column":57},"generated":{"line":1103,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":2},"generated":{"line":1104,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":9},"generated":{"line":1104,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":13},"generated":{"line":1104,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":9},"generated":{"line":1104,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":30},"generated":{"line":1104,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":9},"generated":{"line":1104,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":935,"column":2},"generated":{"line":1104,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":936,"column":1},"generated":{"line":1105,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":6},"generated":{"line":1107,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":16},"generated":{"line":1107,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":6},"generated":{"line":1107,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":26},"generated":{"line":1107,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":6},"generated":{"line":1107,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":50},"generated":{"line":1107,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":938,"column":2},"generated":{"line":1108,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":938,"column":9},"generated":{"line":1108,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":938,"column":25},"generated":{"line":1108,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":938,"column":26},"generated":{"line":1108,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":938,"column":25},"generated":{"line":1108,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":938,"column":2},"generated":{"line":1108,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":939,"column":1},"generated":{"line":1109,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":940,"column":0},"generated":{"line":1109,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":941,"column":0},"generated":{"line":1110,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":942,"column":6},"generated":{"line":1113,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":942,"column":16},"generated":{"line":1113,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":942,"column":6},"generated":{"line":1113,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":942,"column":29},"generated":{"line":1113,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":942,"column":6},"generated":{"line":1113,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":942,"column":53},"generated":{"line":1113,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":943,"column":2},"generated":{"line":1114,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":943,"column":9},"generated":{"line":1114,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":943,"column":25},"generated":{"line":1114,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":943,"column":26},"generated":{"line":1114,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":943,"column":25},"generated":{"line":1114,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":943,"column":2},"generated":{"line":1114,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":944,"column":1},"generated":{"line":1115,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":946,"column":0},"generated":{"line":1116,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":967,"column":0},"generated":{"line":1138,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":968,"column":6},"generated":{"line":1141,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":968,"column":16},"generated":{"line":1141,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":968,"column":6},"generated":{"line":1141,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":968,"column":33},"generated":{"line":1141,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":968,"column":6},"generated":{"line":1141,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":968,"column":57},"generated":{"line":1141,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":2},"generated":{"line":1142,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":9},"generated":{"line":1142,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":13},"generated":{"line":1142,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":9},"generated":{"line":1142,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":30},"generated":{"line":1142,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":9},"generated":{"line":1142,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":969,"column":2},"generated":{"line":1142,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":970,"column":1},"generated":{"line":1143,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":6},"generated":{"line":1145,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":16},"generated":{"line":1145,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":6},"generated":{"line":1145,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":26},"generated":{"line":1145,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":6},"generated":{"line":1145,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":50},"generated":{"line":1145,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":2},"generated":{"line":1146,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":9},"generated":{"line":1146,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":25},"generated":{"line":1146,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":26},"generated":{"line":1146,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":25},"generated":{"line":1146,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":2},"generated":{"line":1146,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":973,"column":1},"generated":{"line":1147,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":974,"column":0},"generated":{"line":1147,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":975,"column":0},"generated":{"line":1148,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":976,"column":6},"generated":{"line":1151,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":976,"column":16},"generated":{"line":1151,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":976,"column":6},"generated":{"line":1151,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":976,"column":29},"generated":{"line":1151,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":976,"column":6},"generated":{"line":1151,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":976,"column":53},"generated":{"line":1151,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":977,"column":2},"generated":{"line":1152,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":977,"column":9},"generated":{"line":1152,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":977,"column":25},"generated":{"line":1152,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":977,"column":26},"generated":{"line":1152,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":977,"column":25},"generated":{"line":1152,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":977,"column":2},"generated":{"line":1152,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":978,"column":1},"generated":{"line":1153,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":980,"column":0},"generated":{"line":1154,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":999,"column":0},"generated":{"line":1174,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1000,"column":6},"generated":{"line":1177,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1000,"column":16},"generated":{"line":1177,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1000,"column":6},"generated":{"line":1177,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1000,"column":33},"generated":{"line":1177,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1000,"column":6},"generated":{"line":1177,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1000,"column":57},"generated":{"line":1177,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":2},"generated":{"line":1178,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":9},"generated":{"line":1178,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":13},"generated":{"line":1178,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":9},"generated":{"line":1178,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":30},"generated":{"line":1178,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":9},"generated":{"line":1178,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1001,"column":2},"generated":{"line":1178,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1002,"column":1},"generated":{"line":1179,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1003,"column":6},"generated":{"line":1181,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1003,"column":16},"generated":{"line":1181,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1003,"column":6},"generated":{"line":1181,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1003,"column":26},"generated":{"line":1181,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1003,"column":6},"generated":{"line":1181,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1003,"column":50},"generated":{"line":1181,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":2},"generated":{"line":1182,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":9},"generated":{"line":1182,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":25},"generated":{"line":1182,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":26},"generated":{"line":1182,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":25},"generated":{"line":1182,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":2},"generated":{"line":1182,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1005,"column":1},"generated":{"line":1183,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1006,"column":0},"generated":{"line":1183,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1007,"column":0},"generated":{"line":1184,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":6},"generated":{"line":1187,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":16},"generated":{"line":1187,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":6},"generated":{"line":1187,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":29},"generated":{"line":1187,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":6},"generated":{"line":1187,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":53},"generated":{"line":1187,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1009,"column":2},"generated":{"line":1188,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1009,"column":9},"generated":{"line":1188,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1009,"column":25},"generated":{"line":1188,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1009,"column":26},"generated":{"line":1188,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1009,"column":25},"generated":{"line":1188,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1009,"column":2},"generated":{"line":1188,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1010,"column":1},"generated":{"line":1189,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1012,"column":0},"generated":{"line":1190,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1019,"column":0},"generated":{"line":1198,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1020,"column":6},"generated":{"line":1201,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1020,"column":16},"generated":{"line":1201,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1020,"column":6},"generated":{"line":1201,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1020,"column":39},"generated":{"line":1201,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1020,"column":6},"generated":{"line":1201,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1020,"column":55},"generated":{"line":1201,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":2},"generated":{"line":1202,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":9},"generated":{"line":1202,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":13},"generated":{"line":1202,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":9},"generated":{"line":1202,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":36},"generated":{"line":1202,"column":45}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":9},"generated":{"line":1202,"column":49}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1021,"column":2},"generated":{"line":1202,"column":50}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1022,"column":1},"generated":{"line":1203,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1024,"column":0},"generated":{"line":1204,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1036,"column":0},"generated":{"line":1217,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1037,"column":6},"generated":{"line":1220,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1037,"column":16},"generated":{"line":1220,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1037,"column":6},"generated":{"line":1220,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1037,"column":39},"generated":{"line":1220,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1037,"column":6},"generated":{"line":1220,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1037,"column":69},"generated":{"line":1220,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":2},"generated":{"line":1221,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":9},"generated":{"line":1221,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":13},"generated":{"line":1221,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":9},"generated":{"line":1221,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":36},"generated":{"line":1221,"column":45}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":9},"generated":{"line":1221,"column":49}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1038,"column":2},"generated":{"line":1221,"column":50}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1039,"column":1},"generated":{"line":1222,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1041,"column":0},"generated":{"line":1223,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1048,"column":0},"generated":{"line":1231,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1049,"column":6},"generated":{"line":1234,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1049,"column":16},"generated":{"line":1234,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1049,"column":6},"generated":{"line":1234,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1049,"column":35},"generated":{"line":1234,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1049,"column":6},"generated":{"line":1234,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1049,"column":51},"generated":{"line":1234,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":2},"generated":{"line":1235,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":9},"generated":{"line":1235,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":13},"generated":{"line":1235,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":9},"generated":{"line":1235,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":32},"generated":{"line":1235,"column":41}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":9},"generated":{"line":1235,"column":45}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1050,"column":2},"generated":{"line":1235,"column":46}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1051,"column":1},"generated":{"line":1236,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1053,"column":0},"generated":{"line":1237,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1065,"column":0},"generated":{"line":1250,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1066,"column":6},"generated":{"line":1253,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1066,"column":16},"generated":{"line":1253,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1066,"column":6},"generated":{"line":1253,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1066,"column":35},"generated":{"line":1253,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1066,"column":6},"generated":{"line":1253,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1066,"column":65},"generated":{"line":1253,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":2},"generated":{"line":1254,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":9},"generated":{"line":1254,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":13},"generated":{"line":1254,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":9},"generated":{"line":1254,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":32},"generated":{"line":1254,"column":41}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":9},"generated":{"line":1254,"column":45}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1067,"column":2},"generated":{"line":1254,"column":46}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1068,"column":1},"generated":{"line":1255,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1070,"column":0},"generated":{"line":1256,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1077,"column":0},"generated":{"line":1264,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1078,"column":6},"generated":{"line":1267,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1078,"column":16},"generated":{"line":1267,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1078,"column":6},"generated":{"line":1267,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1078,"column":29},"generated":{"line":1267,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1078,"column":6},"generated":{"line":1267,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1078,"column":53},"generated":{"line":1267,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":2},"generated":{"line":1268,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":9},"generated":{"line":1268,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":13},"generated":{"line":1268,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":9},"generated":{"line":1268,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":26},"generated":{"line":1268,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":9},"generated":{"line":1268,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1079,"column":2},"generated":{"line":1268,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1080,"column":1},"generated":{"line":1269,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1082,"column":0},"generated":{"line":1270,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1101,"column":0},"generated":{"line":1290,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1102,"column":6},"generated":{"line":1293,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1102,"column":16},"generated":{"line":1293,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1102,"column":6},"generated":{"line":1293,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1102,"column":29},"generated":{"line":1293,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1102,"column":6},"generated":{"line":1293,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1102,"column":53},"generated":{"line":1293,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":2},"generated":{"line":1294,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":9},"generated":{"line":1294,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":13},"generated":{"line":1294,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":9},"generated":{"line":1294,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":26},"generated":{"line":1294,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":9},"generated":{"line":1294,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1103,"column":2},"generated":{"line":1294,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1104,"column":1},"generated":{"line":1295,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1106,"column":0},"generated":{"line":1296,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1125,"column":0},"generated":{"line":1316,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1126,"column":6},"generated":{"line":1319,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1126,"column":16},"generated":{"line":1319,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1126,"column":6},"generated":{"line":1319,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1126,"column":29},"generated":{"line":1319,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1126,"column":6},"generated":{"line":1319,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1126,"column":53},"generated":{"line":1319,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":2},"generated":{"line":1320,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":9},"generated":{"line":1320,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":13},"generated":{"line":1320,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":9},"generated":{"line":1320,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":26},"generated":{"line":1320,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":9},"generated":{"line":1320,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1127,"column":2},"generated":{"line":1320,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1128,"column":1},"generated":{"line":1321,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1130,"column":0},"generated":{"line":1321,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1132,"column":0},"generated":{"line":1323,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1153,"column":0},"generated":{"line":1345,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1154,"column":6},"generated":{"line":1348,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1154,"column":16},"generated":{"line":1348,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1154,"column":6},"generated":{"line":1348,"column":12}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1154,"column":20},"generated":{"line":1348,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1154,"column":6},"generated":{"line":1348,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1154,"column":38},"generated":{"line":1348,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":2},"generated":{"line":1349,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":9},"generated":{"line":1349,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":13},"generated":{"line":1349,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":9},"generated":{"line":1349,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":17},"generated":{"line":1349,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":9},"generated":{"line":1349,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1155,"column":2},"generated":{"line":1349,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1156,"column":1},"generated":{"line":1350,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1158,"column":0},"generated":{"line":1351,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1201,"column":0},"generated":{"line":1395,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1202,"column":6},"generated":{"line":1398,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1202,"column":16},"generated":{"line":1398,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1202,"column":6},"generated":{"line":1398,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1202,"column":24},"generated":{"line":1398,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1202,"column":6},"generated":{"line":1398,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1202,"column":46},"generated":{"line":1398,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":2},"generated":{"line":1399,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":9},"generated":{"line":1399,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":13},"generated":{"line":1399,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":9},"generated":{"line":1399,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":21},"generated":{"line":1399,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":9},"generated":{"line":1399,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1203,"column":2},"generated":{"line":1399,"column":37}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1204,"column":1},"generated":{"line":1400,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1206,"column":0},"generated":{"line":1401,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1227,"column":0},"generated":{"line":1423,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1228,"column":6},"generated":{"line":1426,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1228,"column":16},"generated":{"line":1426,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1228,"column":6},"generated":{"line":1426,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1228,"column":21},"generated":{"line":1426,"column":14}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1228,"column":6},"generated":{"line":1426,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1228,"column":40},"generated":{"line":1426,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":2},"generated":{"line":1427,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1427,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":13},"generated":{"line":1427,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1427,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":18},"generated":{"line":1427,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1427,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1229,"column":2},"generated":{"line":1427,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1230,"column":1},"generated":{"line":1428,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1232,"column":0},"generated":{"line":1429,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1275,"column":0},"generated":{"line":1473,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1276,"column":6},"generated":{"line":1476,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1276,"column":16},"generated":{"line":1476,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1276,"column":6},"generated":{"line":1476,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1276,"column":25},"generated":{"line":1476,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1276,"column":6},"generated":{"line":1476,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1276,"column":48},"generated":{"line":1476,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":2},"generated":{"line":1477,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":9},"generated":{"line":1477,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":13},"generated":{"line":1477,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":9},"generated":{"line":1477,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":22},"generated":{"line":1477,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":9},"generated":{"line":1477,"column":37}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1277,"column":2},"generated":{"line":1477,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1278,"column":1},"generated":{"line":1478,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1280,"column":0},"generated":{"line":1479,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1302,"column":0},"generated":{"line":1502,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1303,"column":6},"generated":{"line":1505,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1303,"column":16},"generated":{"line":1505,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1303,"column":6},"generated":{"line":1505,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1303,"column":26},"generated":{"line":1505,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1303,"column":6},"generated":{"line":1505,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1303,"column":50},"generated":{"line":1505,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":2},"generated":{"line":1506,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":9},"generated":{"line":1506,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":13},"generated":{"line":1506,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":9},"generated":{"line":1506,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":23},"generated":{"line":1506,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":9},"generated":{"line":1506,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1304,"column":2},"generated":{"line":1506,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1305,"column":1},"generated":{"line":1507,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1307,"column":0},"generated":{"line":1508,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1350,"column":0},"generated":{"line":1552,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1351,"column":6},"generated":{"line":1555,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1351,"column":16},"generated":{"line":1555,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1351,"column":6},"generated":{"line":1555,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1351,"column":30},"generated":{"line":1555,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1351,"column":6},"generated":{"line":1555,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1351,"column":58},"generated":{"line":1555,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":2},"generated":{"line":1556,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":9},"generated":{"line":1556,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":13},"generated":{"line":1556,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":9},"generated":{"line":1556,"column":37}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":27},"generated":{"line":1556,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":9},"generated":{"line":1556,"column":42}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1352,"column":2},"generated":{"line":1556,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1353,"column":1},"generated":{"line":1557,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1355,"column":0},"generated":{"line":1558,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1413,"column":0},"generated":{"line":1617,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1414,"column":6},"generated":{"line":1620,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1414,"column":16},"generated":{"line":1620,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1414,"column":6},"generated":{"line":1620,"column":12}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1414,"column":20},"generated":{"line":1620,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1414,"column":6},"generated":{"line":1620,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1414,"column":38},"generated":{"line":1620,"column":19}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":2},"generated":{"line":1621,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":9},"generated":{"line":1621,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":13},"generated":{"line":1621,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":9},"generated":{"line":1621,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":17},"generated":{"line":1621,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":9},"generated":{"line":1621,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1415,"column":2},"generated":{"line":1621,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1416,"column":1},"generated":{"line":1622,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1418,"column":0},"generated":{"line":1623,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1423,"column":0},"generated":{"line":1629,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1424,"column":6},"generated":{"line":1632,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1424,"column":16},"generated":{"line":1632,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1424,"column":6},"generated":{"line":1632,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1424,"column":32},"generated":{"line":1632,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1424,"column":6},"generated":{"line":1632,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1424,"column":57},"generated":{"line":1632,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":2},"generated":{"line":1633,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":9},"generated":{"line":1633,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":13},"generated":{"line":1633,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":9},"generated":{"line":1633,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":29},"generated":{"line":1633,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":9},"generated":{"line":1633,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1425,"column":2},"generated":{"line":1633,"column":45}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1426,"column":1},"generated":{"line":1634,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1428,"column":0},"generated":{"line":1634,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1430,"column":0},"generated":{"line":1636,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1431,"column":6},"generated":{"line":1639,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1431,"column":16},"generated":{"line":1639,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1431,"column":6},"generated":{"line":1639,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1431,"column":30},"generated":{"line":1639,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1431,"column":6},"generated":{"line":1639,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1431,"column":58},"generated":{"line":1639,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":2},"generated":{"line":1640,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":9},"generated":{"line":1640,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":13},"generated":{"line":1640,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":9},"generated":{"line":1640,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":27},"generated":{"line":1640,"column":37}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":9},"generated":{"line":1640,"column":41}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1432,"column":2},"generated":{"line":1640,"column":42}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1433,"column":1},"generated":{"line":1641,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1435,"column":0},"generated":{"line":1642,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1479,"column":0},"generated":{"line":1687,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1480,"column":6},"generated":{"line":1690,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1480,"column":16},"generated":{"line":1690,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1480,"column":6},"generated":{"line":1690,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1480,"column":32},"generated":{"line":1690,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1480,"column":6},"generated":{"line":1690,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1480,"column":54},"generated":{"line":1690,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":2},"generated":{"line":1691,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":9},"generated":{"line":1691,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":13},"generated":{"line":1691,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":9},"generated":{"line":1691,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":29},"generated":{"line":1691,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":9},"generated":{"line":1691,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1481,"column":2},"generated":{"line":1691,"column":44}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1482,"column":1},"generated":{"line":1692,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1484,"column":0},"generated":{"line":1692,"column":2}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1485,"column":7},"generated":{"line":1695,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1485,"column":13},"generated":{"line":1695,"column":6}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1485,"column":28},"generated":{"line":1695,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1485,"column":31},"generated":{"line":1695,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1485,"column":7},"generated":{"line":1695,"column":42}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1486,"column":7},"generated":{"line":1697,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1486,"column":13},"generated":{"line":1697,"column":6}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1486,"column":28},"generated":{"line":1697,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1486,"column":31},"generated":{"line":1697,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1486,"column":7},"generated":{"line":1697,"column":42}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1487,"column":7},"generated":{"line":1699,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1487,"column":13},"generated":{"line":1699,"column":6}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1487,"column":22},"generated":{"line":1699,"column":15}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1487,"column":25},"generated":{"line":1699,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1487,"column":7},"generated":{"line":1699,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1488,"column":7},"generated":{"line":1701,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1488,"column":13},"generated":{"line":1701,"column":6}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1488,"column":22},"generated":{"line":1701,"column":15}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1488,"column":25},"generated":{"line":1701,"column":18}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1488,"column":7},"generated":{"line":1701,"column":30}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1492,"column":0},"generated":{"line":1704,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1513,"column":0},"generated":{"line":1726,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1514,"column":6},"generated":{"line":1727,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1514,"column":16},"generated":{"line":1727,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1514,"column":6},"generated":{"line":1727,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1514,"column":30},"generated":{"line":1727,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1514,"column":6},"generated":{"line":1727,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1514,"column":53},"generated":{"line":1727,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":2},"generated":{"line":1728,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":9},"generated":{"line":1728,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":13},"generated":{"line":1728,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":9},"generated":{"line":1728,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":27},"generated":{"line":1728,"column":34}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":9},"generated":{"line":1728,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1515,"column":2},"generated":{"line":1728,"column":39}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1516,"column":1},"generated":{"line":1729,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1518,"column":0},"generated":{"line":1730,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1541,"column":0},"generated":{"line":1754,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1542,"column":6},"generated":{"line":1757,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1542,"column":16},"generated":{"line":1757,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1542,"column":6},"generated":{"line":1757,"column":24}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1542,"column":32},"generated":{"line":1757,"column":25}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1542,"column":6},"generated":{"line":1757,"column":29}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1542,"column":57},"generated":{"line":1757,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":2},"generated":{"line":1758,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":9},"generated":{"line":1758,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":13},"generated":{"line":1758,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":9},"generated":{"line":1758,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":29},"generated":{"line":1758,"column":36}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":9},"generated":{"line":1758,"column":40}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1543,"column":2},"generated":{"line":1758,"column":41}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1544,"column":1},"generated":{"line":1759,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1546,"column":0},"generated":{"line":1760,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1575,"column":0},"generated":{"line":1790,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":6},"generated":{"line":1793,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":16},"generated":{"line":1793,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":6},"generated":{"line":1793,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":29},"generated":{"line":1793,"column":22}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":6},"generated":{"line":1793,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":51},"generated":{"line":1793,"column":28}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":2},"generated":{"line":1794,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":9},"generated":{"line":1794,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":13},"generated":{"line":1794,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":9},"generated":{"line":1794,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":26},"generated":{"line":1794,"column":33}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":9},"generated":{"line":1794,"column":37}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1577,"column":2},"generated":{"line":1794,"column":38}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1578,"column":1},"generated":{"line":1795,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1580,"column":0},"generated":{"line":1796,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1601,"column":0},"generated":{"line":1818,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1602,"column":6},"generated":{"line":1821,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1602,"column":16},"generated":{"line":1821,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1602,"column":6},"generated":{"line":1821,"column":16}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1602,"column":24},"generated":{"line":1821,"column":17}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1602,"column":6},"generated":{"line":1821,"column":21}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1602,"column":42},"generated":{"line":1821,"column":23}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":2},"generated":{"line":1822,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":9},"generated":{"line":1822,"column":9}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":13},"generated":{"line":1822,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":9},"generated":{"line":1822,"column":26}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":21},"generated":{"line":1822,"column":27}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":9},"generated":{"line":1822,"column":31}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":2},"generated":{"line":1822,"column":32}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":1},"generated":{"line":1823,"column":0}}],"sources":{"../src/exports_layers.ts":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {InputLayer, InputLayerArgs} from './engine/input_layer';\nimport {Layer, LayerArgs} from './engine/topology';\nimport {input} from './exports';\nimport {ELU, ELULayerArgs, LeakyReLU, LeakyReLULayerArgs, PReLU, PReLULayerArgs, ReLU, ReLULayerArgs, Softmax, SoftmaxLayerArgs, ThresholdedReLU, ThresholdedReLULayerArgs} from './layers/advanced_activations';\nimport {Conv1D, Conv2D, Conv2DTranspose, Conv3D, ConvLayerArgs, Cropping2D, Cropping2DLayerArgs, SeparableConv2D, SeparableConvLayerArgs, UpSampling2D, UpSampling2DLayerArgs} from './layers/convolutional';\nimport {DepthwiseConv2D, DepthwiseConv2DLayerArgs} from './layers/convolutional_depthwise';\nimport {Activation, ActivationLayerArgs, Dense, DenseLayerArgs, Dropout, DropoutLayerArgs, Flatten, FlattenLayerArgs, Masking, MaskingArgs, Permute, PermuteLayerArgs, RepeatVector, RepeatVectorLayerArgs, Reshape, ReshapeLayerArgs, SpatialDropout1D, SpatialDropout1DLayerConfig} from './layers/core';\nimport {Embedding, EmbeddingLayerArgs} from './layers/embeddings';\nimport {Add, Average, Concatenate, ConcatenateLayerArgs, Dot, DotLayerArgs, Maximum, Minimum, Multiply} from './layers/merge';\nimport {AlphaDropout, AlphaDropoutArgs, GaussianDropout, GaussianDropoutArgs, GaussianNoise, GaussianNoiseArgs} from './layers/noise';\nimport {BatchNormalization, BatchNormalizationLayerArgs, LayerNormalization, LayerNormalizationLayerArgs} from './layers/normalization';\nimport {ZeroPadding2D, ZeroPadding2DLayerArgs} from './layers/padding';\nimport {AveragePooling1D, AveragePooling2D, AveragePooling3D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalPooling2DLayerArgs, MaxPooling1D, MaxPooling2D, MaxPooling3D, Pooling1DLayerArgs, Pooling2DLayerArgs, Pooling3DLayerArgs} from './layers/pooling';\nimport {GRU, GRUCell, GRUCellLayerArgs, GRULayerArgs, LSTM, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNN, SimpleRNNCell, SimpleRNNCellLayerArgs, SimpleRNNLayerArgs, StackedRNNCells, StackedRNNCellsArgs} from './layers/recurrent';\nimport {Bidirectional, BidirectionalLayerArgs, TimeDistributed, WrapperLayerArgs} from './layers/wrappers';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// Input Layer.\n/**\n * An input layer is an entry point into a `tf.LayersModel`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential`` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.predict(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.predict(tf.zeros([1, 3])).print();\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'} */\nexport function inputLayer(args: InputLayerArgs): Layer {\n  return new InputLayer(args);\n}\n\n// Advanced Activation Layers.\n\n/**\n * Exponetial Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function elu(args?: ELULayerArgs): Layer {\n  return new ELU(args);\n}\n\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function reLU(args?: ReLULayerArgs): Layer {\n  return new ReLU(args);\n}\n\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function leakyReLU(args?: LeakyReLULayerArgs): Layer {\n  return new LeakyReLU(args);\n}\n\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function prelu(args?: PReLULayerArgs): Layer {\n  return new PReLU(args);\n}\n\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function softmax(args?: SoftmaxLayerArgs): Layer {\n  return new Softmax(args);\n}\n\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function thresholdedReLU(args?: ThresholdedReLULayerArgs): Layer {\n  return new ThresholdedReLU(args);\n}\n\n// Convolutional Layers.\n\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\n */\nexport function conv1d(args: ConvLayerArgs): Layer {\n  return new Conv1D(args);\n}\n\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2d(args: ConvLayerArgs): Layer {\n  return new Conv2D(args);\n}\n\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2dTranspose(args: ConvLayerArgs): Layer {\n  return new Conv2DTranspose(args);\n}\n\n/**\n * 3D convolution layer (e.g. spatial convolution over volumes).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\n * in `dataFormat='channelsLast'`.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv3d(args: ConvLayerArgs): Layer {\n  return new Conv3D(args);\n}\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function separableConv2d(args: SeparableConvLayerArgs): Layer {\n  return new SeparableConv2D(args);\n}\n\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function cropping2D(args: Cropping2DLayerArgs): Layer {\n  return new Cropping2D(args);\n}\n\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function upSampling2d(args: UpSampling2DLayerArgs): Layer {\n  return new UpSampling2D(args);\n}\n\n// Convolutional(depthwise) Layers.\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function depthwiseConv2d(args: DepthwiseConv2DLayerArgs): Layer {\n  return new DepthwiseConv2D(args);\n}\n\n// Basic Layers.\n\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function activation(args: ActivationLayerArgs): Layer {\n  return new Activation(args);\n}\n\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function dense(args: DenseLayerArgs): Layer {\n  return new Dense(args);\n}\n\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function dropout(args: DropoutLayerArgs): Layer {\n  return new Dropout(args);\n}\n\n/**\n * Spatial 1D version of Dropout.\n *\n * This Layer type performs the same function as the Dropout layer, but it drops\n * entire 1D feature maps instead of individual elements. For example, if an\n * input example consists of 3 timesteps and the feature map for each timestep\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\n * elements of the 3rd timestep.\n *\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\n * case in early convolution layers), regular dropout will not regularize the\n * activation and will otherwise just result in merely an effective learning\n * rate decrease. In this case, `spatialDropout1d` will help promote\n * independence among feature maps and should be used instead.\n *\n * **Arguments:**\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\n *     to drop.\n *\n * **Input shape:**\n *   3D tensor with shape `(samples, timesteps, channels)`.\n *\n * **Output shape:**\n *   Same as the input shape.\n *\n * References:\n *   - [Efficient Object Localization Using Convolutional\n *      Networks](https://arxiv.org/abs/1411.4280)\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function spatialDropout1d(args: SpatialDropout1DLayerConfig): Layer {\n  return new SpatialDropout1D(args);\n}\n\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function flatten(args?: FlattenLayerArgs): Layer {\n  return new Flatten(args);\n}\n\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't see\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function repeatVector(args: RepeatVectorLayerArgs): Layer {\n  return new RepeatVector(args);\n}\n\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary, although all dimensions in the input shape must be fixed.\n *   Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function reshape(args: ReshapeLayerArgs): Layer {\n  return new Reshape(args);\n}\n\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as the first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function permute(args: PermuteLayerArgs): Layer {\n  return new Permute(args);\n}\n\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * eg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function embedding(args: EmbeddingLayerArgs): Layer {\n  return new Embedding(args);\n}\n\n// Merge Layers.\n\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function add(args?: LayerArgs): Layer {\n  return new Add(args);\n}\n\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function average(args?: LayerArgs): Layer {\n  return new Average(args);\n}\n\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function concatenate(args?: ConcatenateLayerArgs): Layer {\n  return new Concatenate(args);\n}\n\n/**\n * Layer that computes the element-wise maximum an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function maximum(args?: LayerArgs): Layer {\n  return new Maximum(args);\n}\n\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function minimum(args?: LayerArgs): Layer {\n  return new Minimum(args);\n}\n\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function multiply(args?: LayerArgs): Layer {\n  return new Multiply(args);\n}\n\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function dot(args: DotLayerArgs): Layer {\n  return new Dot(args);\n}\n\n// Normalization Layers.\n\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function batchNormalization(args?: BatchNormalizationLayerArgs): Layer {\n  return new BatchNormalization(args);\n}\n\n/**\n * Layer-normalization layer (Ba et al., 2016).\n *\n * Normalizes the activations of the previous layer for each given example in a\n * batch independently, instead of across a batch like in `batchNormalization`.\n * In other words, this layer applies a transformation that maintanis the mean\n * activation within each example close to0 and activation variance close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\n *   layer in a model.\n *\n * Output shape:\n *   Same as input.\n *\n * References:\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function layerNormalization(args?: LayerNormalizationLayerArgs): Layer {\n  return new LayerNormalization(args);\n}\n\n// Padding Layers.\n\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'} */\nexport function zeroPadding2d(args?: ZeroPadding2DLayerArgs): Layer {\n  return new ZeroPadding2D(args);\n}\n\n// Pooling Layers.\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function averagePooling1d(args: Pooling1DLayerArgs): Layer {\n  return new AveragePooling1D(args);\n}\nexport function avgPool1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooleRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooleRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function averagePooling2d(args: Pooling2DLayerArgs): Layer {\n  return new AveragePooling2D(args);\n}\nexport function avgPool2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n\n/**\n * Average pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      4D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function averagePooling3d(args: Pooling3DLayerArgs): Layer {\n  return new AveragePooling3D(args);\n}\nexport function avgPool3d(args: Pooling3DLayerArgs): Layer {\n  return averagePooling3d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling3d(args: Pooling3DLayerArgs): Layer {\n  return averagePooling3d(args);\n}\n\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalAveragePooling1d(args?: LayerArgs): Layer {\n  return new GlobalAveragePooling1D(args);\n}\n\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalAveragePooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalAveragePooling2D(args);\n}\n\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalMaxPooling1d(args?: LayerArgs): Layer {\n  return new GlobalMaxPooling1D(args);\n}\n\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalMaxPooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalMaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function maxPooling1d(args: Pooling1DLayerArgs): Layer {\n  return new MaxPooling1D(args);\n}\n\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooleRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooleRows, pooledCols]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function maxPooling2d(args: Pooling2DLayerArgs): Layer {\n  return new MaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      5D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function maxPooling3d(args: Pooling3DLayerArgs): Layer {\n  return new MaxPooling3D(args);\n}\n\n// Recurrent Layers.\n\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function gru(args: GRULayerArgs): Layer {\n  return new GRU(args);\n}\n\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function gruCell(args: GRUCellLayerArgs): RNNCell {\n  return new GRUCell(args);\n}\n\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function lstm(args: LSTMLayerArgs): Layer {\n  return new LSTM(args);\n}\n\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function lstmCell(args: LSTMCellLayerArgs): RNNCell {\n  return new LSTMCell(args);\n}\n\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function simpleRNN(args: SimpleRNNLayerArgs): Layer {\n  return new SimpleRNN(args);\n}\n\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function simpleRNNCell(args: SimpleRNNCellLayerArgs): RNNCell {\n  return new SimpleRNNCell(args);\n}\n\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to conditon the cell transformation on additional static inputs\n *   (not changing over time), a.k.a an attention mechanism.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function rnn(args: RNNLayerArgs): Layer {\n  return new RNN(args);\n}\n\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function stackedRNNCells(args: StackedRNNCellsArgs): RNNCell {\n  return new StackedRNNCells(args);\n}\n\n// Wrapper Layers.\n\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function bidirectional(args: BidirectionalLayerArgs): Bidirectional {\n  return new Bidirectional(args);\n}\n\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function timeDistributed(args: WrapperLayerArgs): Layer {\n  return new TimeDistributed(args);\n}\n\n// Aliases for pooling.\nexport const globalMaxPool1d = globalMaxPooling1d;\nexport const globalMaxPool2d = globalMaxPooling2d;\nexport const maxPool1d = maxPooling1d;\nexport const maxPool2d = maxPooling2d;\n\nexport {Layer, RNN, RNNCell, input /* alias for tf.input */};\n\n/**\n * Apply additive zero-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * This is useful to mitigate overfitting\n * (you could see it as a form of random data augmentation).\n * Gaussian Noise (GS) is a natural choice as corruption process\n * for real valued inputs.\n *\n * # Arguments\n *     stddev: float, standard deviation of the noise distribution.\n *\n * # Input shape\n *         Arbitrary. Use the keyword argument `input_shape`\n *         (tuple of integers, does not include the samples axis)\n *         when using this layer as the first layer in a model.\n *\n * # Output shape\n *         Same shape as input.\n */\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nexport function gaussianNoise(args: GaussianNoiseArgs): GaussianNoise {\n  return new GaussianNoise(args);\n}\n\n/**\n * Apply multiplicative 1-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n */\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nexport function gaussianDropout(args: GaussianDropoutArgs): GaussianDropout {\n  return new GaussianDropout(args);\n}\n\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nexport function alphaDropout(args: AlphaDropoutArgs): AlphaDropout {\n  return new AlphaDropout(args);\n}\n\n/**\n * Masks a sequence by using a mask value to skip timesteps.\n *\n * If all features for a given sample timestep are equal to `mask_value`,\n * then the sample timestep will be masked (skipped) in all downstream layers\n * (as long as they support masking).\n *\n * If any downstream layer does not support masking yet receives such\n * an input mask, an exception will be raised.\n *\n * Arguments:\n *   - `maskValue`: Either None or mask value to skip.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n */\n/** @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'} */\nexport function masking(args?: MaskingArgs): Layer {\n  return new Masking(args);\n}\n"},"lineCount":null}},"error":null,"hash":"4e083f446b9a9e16c4ee724074a5593f","cacheData":{"env":{}}}