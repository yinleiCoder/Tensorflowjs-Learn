{"id":"../node_modules/@tensorflow/tfjs-data/dist/readers.js","dependencies":[{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js.map","includedInParent":true,"mtime":1595498163410},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\src\\readers.ts","includedInParent":true,"mtime":1595498163410},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\package.json","includedInParent":true,"mtime":1595925880834},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\package.json","includedInParent":true,"mtime":1595498163410},{"name":"./dataset","loc":{"line":18,"column":38},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\dataset.js"},{"name":"./datasets/csv_dataset","loc":{"line":19,"column":27},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\datasets\\csv_dataset.js"},{"name":"./iterators/lazy_iterator","loc":{"line":20,"column":37},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\iterators\\lazy_iterator.js"},{"name":"./iterators/microphone_iterator","loc":{"line":21,"column":35},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\iterators\\microphone_iterator.js"},{"name":"./iterators/webcam_iterator","loc":{"line":22,"column":31},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\iterators\\webcam_iterator.js"},{"name":"./sources/url_data_source","loc":{"line":23,"column":30},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-data\\dist\\sources\\url_data_source.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.csv = csv;\nexports.func = func;\nexports.generator = generator;\nexports.webcam = webcam;\nexports.microphone = microphone;\n\nvar _dataset = require(\"./dataset\");\n\nvar _csv_dataset = require(\"./datasets/csv_dataset\");\n\nvar _lazy_iterator = require(\"./iterators/lazy_iterator\");\n\nvar _microphone_iterator = require(\"./iterators/microphone_iterator\");\n\nvar _webcam_iterator = require(\"./iterators/webcam_iterator\");\n\nvar _url_data_source = require(\"./sources/url_data_source\");\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/**\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\n * or local path if it's in Node environment.\n *\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\n * element in returned `CSVDataset` will be an object of\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\n * is a dict of labels key/value pairs. If no column is marked as label,\n * returns a dict of features only.\n *\n * ```js\n * const csvUrl =\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\n *\n * async function run() {\n *   // We want to predict the column \"medv\", which represents a median value of\n *   // a home (in $1000s), so we mark it as a label.\n *   const csvDataset = tf.data.csv(\n *     csvUrl, {\n *       columnConfigs: {\n *         medv: {\n *           isLabel: true\n *         }\n *       }\n *     });\n *\n *   // Number of features is the number of column names minus one for the label\n *   // column.\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\n *\n *   // Prepare the Dataset for training.\n *   const flattenedDataset =\n *     csvDataset\n *     .map(({xs, ys}) =>\n *       {\n *         // Convert xs(features) and ys(labels) from object form (keyed by\n *         // column name) to array form.\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\n *       })\n *     .batch(10);\n *\n *   // Define the model.\n *   const model = tf.sequential();\n *   model.add(tf.layers.dense({\n *     inputShape: [numOfFeatures],\n *     units: 1\n *   }));\n *   model.compile({\n *     optimizer: tf.train.sgd(0.000001),\n *     loss: 'meanSquaredError'\n *   });\n *\n *   // Fit the model using the prepared Dataset\n *   return model.fitDataset(flattenedDataset, {\n *     epochs: 10,\n *     callbacks: {\n *       onEpochEnd: async (epoch, logs) => {\n *         console.log(epoch + ':' + logs.loss);\n *       }\n *     }\n *   });\n * }\n *\n * await run();\n * ```\n *\n * @param source URL or local path to get CSV file. If it's a local path, it\n * must have prefix `file://` and it only works in node environment.\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\n *     of reading and decoding from CSV file(s).\n */\n\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nfunction csv(source, csvConfig = {}) {\n  return new _csv_dataset.CSVDataset(new _url_data_source.URLDataSource(source), csvConfig);\n}\n/**\n * Create a `Dataset` that produces each element by calling a provided function.\n *\n * Note that repeated iterations over this `Dataset` may produce different\n * results, because the function will be called anew for each element of each\n * iteration.\n *\n * Also, beware that the sequence of calls to this function may be out of order\n * in time with respect to the logical order of the Dataset. This is due to the\n * asynchronous lazy nature of stream processing, and depends on downstream\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\n * pointer), then the order of the produced elements may be scrambled.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const ds = tf.data.func(func);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param f A function that produces one data element on each call.\n */\n\n\nfunction func(f) {\n  const iter = (0, _lazy_iterator.iteratorFromFunction)(f);\n  return (0, _dataset.datasetFromIteratorFn)(async () => iter);\n}\n/**\n * Create a `Dataset` that produces each element from provided JavaScript\n * generator, which is a function*\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\n * or a function that returns an\n * iterator\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\n *\n * The returned iterator should have `.next()` function that returns element in\n * format of `{value: TensorContainer, done:boolean}`.\n *\n * Example of creating a dataset from an iterator factory:\n * ```js\n * function makeIterator() {\n *   const numElements = 10;\n *   let index = 0;\n *\n *   const iterator = {\n *     next: () => {\n *       let result;\n *       if (index < numElements) {\n *         result = {value: index, done: false};\n *         index++;\n *         return result;\n *       }\n *       return {value: index, done: true};\n *     }\n *   };\n *   return iterator;\n * }\n * const ds = tf.data.generator(makeIterator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * Example of creating a dataset from a generator:\n * ```js\n * function* dataGenerator() {\n *   const numElements = 10;\n *   let index = 0;\n *   while (index < numElements) {\n *     const x = index;\n *     index++;\n *     yield x;\n *   }\n * }\n *\n * const ds = tf.data.generator(dataGenerator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param generator A Javascript generator function that returns a JavaScript\n *     iterator.\n */\n\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\n\n\nfunction generator(generator) {\n  return (0, _dataset.datasetFromIteratorFn)(async () => {\n    const gen = await generator();\n    return (0, _lazy_iterator.iteratorFromFunction)(() => gen.next());\n  });\n}\n/**\n * Create an iterator that generate `Tensor`s from webcam video stream. This API\n * only works in Browser environment when the device has webcam.\n *\n * Note: this code snippet only works when the device has a webcam. It will\n * request permission to open the webcam when running.\n * ```js\n * const videoElement = document.createElement('video');\n * videoElement.width = 100;\n * videoElement.height = 100;\n * const cam = await tf.data.webcam(videoElement);\n * const img = await cam.capture();\n * img.print();\n * cam.stop();\n * ```\n *\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\n *     provided to set the generated tensor shape.\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\n *     reading and manipulating data from webcam video stream.\n */\n\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\n\n\nasync function webcam(webcamVideoElement, webcamConfig) {\n  return _webcam_iterator.WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\n/**\n * Create an iterator that generate frequency-domain spectrogram `Tensor`s from\n * microphone audio stream with browser's native FFT. This API only works in\n * browser environment when the device has microphone.\n *\n * Note: this code snippet only works when the device has a microphone. It will\n * request permission to open the microphone when running.\n * ```js\n * const mic = await tf.data.microphone({\n *   fftSize: 1024,\n *   columnTruncateLength: 232,\n *   numFramesPerSpectrogram: 43,\n *   sampleRateHz:44100,\n *   includeSpectrogram: true,\n *   includeWaveform: true\n * });\n * const audioData = await mic.capture();\n * const spectrogramTensor = audioData.spectrogram;\n * spectrogramTensor.print();\n * const waveformTensor = audioData.waveform;\n * waveformTensor.print();\n * mic.stop();\n * ```\n *\n * @param microphoneConfig A `MicrophoneConfig` object that contains\n *     configurations of reading audio data from microphone.\n */\n\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\n\n\nasync function microphone(microphoneConfig) {\n  return _microphone_iterator.MicrophoneIterator.create(microphoneConfig);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":12,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":14,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":16,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":18,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":20,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":22,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":24,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":42,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":99,"column":0},"generated":{"line":114,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":122,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":16},"generated":{"line":122,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":122,"column":12}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":4},"generated":{"line":122,"column":13}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":122,"column":19}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":25},"generated":{"line":122,"column":21}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":25},"generated":{"line":122,"column":30}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":48},"generated":{"line":122,"column":33}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":122,"column":35}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":50},"generated":{"line":122,"column":37}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":123,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":9},"generated":{"line":123,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":13},"generated":{"line":123,"column":13}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":9},"generated":{"line":123,"column":36}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":24},"generated":{"line":123,"column":37}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":28},"generated":{"line":123,"column":41}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":24},"generated":{"line":123,"column":71}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":42},"generated":{"line":123,"column":72}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":24},"generated":{"line":123,"column":78}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":9},"generated":{"line":123,"column":79}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":51},"generated":{"line":123,"column":81}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":9},"generated":{"line":123,"column":90}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":123,"column":91}},{"source":"../src/readers.ts","name":null,"original":{"line":110,"column":1},"generated":{"line":124,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":112,"column":0},"generated":{"line":125,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":136,"column":6},"generated":{"line":151,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":136,"column":16},"generated":{"line":151,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":136,"column":6},"generated":{"line":151,"column":13}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":4},"generated":{"line":151,"column":14}},{"source":"../src/readers.ts","name":null,"original":{"line":136,"column":6},"generated":{"line":151,"column":15}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":58},"generated":{"line":151,"column":17}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":2},"generated":{"line":152,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":8},"generated":{"line":152,"column":8}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":12},"generated":{"line":152,"column":12}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":15},"generated":{"line":152,"column":15}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":36},"generated":{"line":152,"column":56}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":15},"generated":{"line":152,"column":57}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":2},"generated":{"line":152,"column":58}},{"source":"../src/readers.ts","name":null,"original":{"line":139,"column":2},"generated":{"line":153,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":139,"column":9},"generated":{"line":153,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":139,"column":31},"generated":{"line":153,"column":45}},{"source":"../src/readers.ts","name":null,"original":{"line":139,"column":43},"generated":{"line":153,"column":57}},{"source":"../src/readers.ts","name":null,"original":{"line":139,"column":9},"generated":{"line":153,"column":61}},{"source":"../src/readers.ts","name":null,"original":{"line":139,"column":2},"generated":{"line":153,"column":62}},{"source":"../src/readers.ts","name":null,"original":{"line":140,"column":1},"generated":{"line":154,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":142,"column":0},"generated":{"line":155,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":195,"column":0},"generated":{"line":209,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":6},"generated":{"line":219,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":16},"generated":{"line":219,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":6},"generated":{"line":219,"column":18}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":4},"generated":{"line":219,"column":19}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":6},"generated":{"line":219,"column":28}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":54},"generated":{"line":219,"column":30}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":2},"generated":{"line":220,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":9},"generated":{"line":220,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":31},"generated":{"line":220,"column":45}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":42},"generated":{"line":220,"column":57}},{"source":"../src/readers.ts","name":null,"original":{"line":206,"column":4},"generated":{"line":221,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":206,"column":10},"generated":{"line":221,"column":10}},{"source":"../src/readers.ts","name":null,"original":{"line":206,"column":13},"generated":{"line":221,"column":13}},{"source":"../src/readers.ts","name":null,"original":{"line":206,"column":16},"generated":{"line":221,"column":16}},{"source":"../src/readers.ts","name":null,"original":{"line":206,"column":22},"generated":{"line":221,"column":22}},{"source":"../src/readers.ts","name":null,"original":{"line":206,"column":31},"generated":{"line":221,"column":31}},{"source":"../src/readers.ts","name":null,"original":{"line":206,"column":4},"generated":{"line":221,"column":33}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":4},"generated":{"line":222,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":11},"generated":{"line":222,"column":11}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":32},"generated":{"line":222,"column":52}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":38},"generated":{"line":222,"column":58}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":41},"generated":{"line":222,"column":61}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":42},"generated":{"line":222,"column":62}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":38},"generated":{"line":222,"column":66}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":11},"generated":{"line":222,"column":68}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":4},"generated":{"line":222,"column":69}},{"source":"../src/readers.ts","name":null,"original":{"line":208,"column":3},"generated":{"line":223,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":9},"generated":{"line":223,"column":3}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":2},"generated":{"line":223,"column":4}},{"source":"../src/readers.ts","name":null,"original":{"line":209,"column":1},"generated":{"line":224,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":211,"column":0},"generated":{"line":225,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":234,"column":0},"generated":{"line":249,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":7},"generated":{"line":259,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":22},"generated":{"line":259,"column":15}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":7},"generated":{"line":259,"column":21}},{"source":"../src/readers.ts","name":null,"original":{"line":243,"column":4},"generated":{"line":259,"column":22}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":7},"generated":{"line":259,"column":40}},{"source":"../src/readers.ts","name":null,"original":{"line":244,"column":4},"generated":{"line":259,"column":42}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":7},"generated":{"line":259,"column":54}},{"source":"../src/readers.ts","name":null,"original":{"line":244,"column":31},"generated":{"line":259,"column":56}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":2},"generated":{"line":260,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":9},"generated":{"line":260,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":24},"generated":{"line":260,"column":41}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":9},"generated":{"line":260,"column":47}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":31},"generated":{"line":260,"column":48}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":9},"generated":{"line":260,"column":66}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":51},"generated":{"line":260,"column":68}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":9},"generated":{"line":260,"column":80}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":2},"generated":{"line":260,"column":81}},{"source":"../src/readers.ts","name":null,"original":{"line":246,"column":1},"generated":{"line":261,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":248,"column":0},"generated":{"line":262,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":275,"column":0},"generated":{"line":290,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":283,"column":7},"generated":{"line":300,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":283,"column":22},"generated":{"line":300,"column":15}},{"source":"../src/readers.ts","name":null,"original":{"line":283,"column":7},"generated":{"line":300,"column":25}},{"source":"../src/readers.ts","name":null,"original":{"line":283,"column":33},"generated":{"line":300,"column":26}},{"source":"../src/readers.ts","name":null,"original":{"line":283,"column":7},"generated":{"line":300,"column":42}},{"source":"../src/readers.ts","name":null,"original":{"line":283,"column":68},"generated":{"line":300,"column":44}},{"source":"../src/readers.ts","name":null,"original":{"line":285,"column":2},"generated":{"line":301,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":285,"column":9},"generated":{"line":301,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":285,"column":28},"generated":{"line":301,"column":49}},{"source":"../src/readers.ts","name":null,"original":{"line":285,"column":9},"generated":{"line":301,"column":55}},{"source":"../src/readers.ts","name":null,"original":{"line":285,"column":35},"generated":{"line":301,"column":56}},{"source":"../src/readers.ts","name":null,"original":{"line":285,"column":9},"generated":{"line":301,"column":72}},{"source":"../src/readers.ts","name":null,"original":{"line":285,"column":2},"generated":{"line":301,"column":73}},{"source":"../src/readers.ts","name":null,"original":{"line":286,"column":1},"generated":{"line":302,"column":0}}],"sources":{"../src/readers.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {TensorContainer} from '@tensorflow/tfjs-core';\nimport {Dataset, datasetFromIteratorFn} from './dataset';\nimport {CSVDataset} from './datasets/csv_dataset';\nimport {iteratorFromFunction} from './iterators/lazy_iterator';\nimport {MicrophoneIterator} from './iterators/microphone_iterator';\nimport {WebcamIterator} from './iterators/webcam_iterator';\nimport {URLDataSource} from './sources/url_data_source';\nimport {CSVConfig, MicrophoneConfig, WebcamConfig} from './types';\n\n/**\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\n * or local path if it's in Node environment.\n *\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\n * element in returned `CSVDataset` will be an object of\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\n * is a dict of labels key/value pairs. If no column is marked as label,\n * returns a dict of features only.\n *\n * ```js\n * const csvUrl =\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\n *\n * async function run() {\n *   // We want to predict the column \"medv\", which represents a median value of\n *   // a home (in $1000s), so we mark it as a label.\n *   const csvDataset = tf.data.csv(\n *     csvUrl, {\n *       columnConfigs: {\n *         medv: {\n *           isLabel: true\n *         }\n *       }\n *     });\n *\n *   // Number of features is the number of column names minus one for the label\n *   // column.\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\n *\n *   // Prepare the Dataset for training.\n *   const flattenedDataset =\n *     csvDataset\n *     .map(({xs, ys}) =>\n *       {\n *         // Convert xs(features) and ys(labels) from object form (keyed by\n *         // column name) to array form.\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\n *       })\n *     .batch(10);\n *\n *   // Define the model.\n *   const model = tf.sequential();\n *   model.add(tf.layers.dense({\n *     inputShape: [numOfFeatures],\n *     units: 1\n *   }));\n *   model.compile({\n *     optimizer: tf.train.sgd(0.000001),\n *     loss: 'meanSquaredError'\n *   });\n *\n *   // Fit the model using the prepared Dataset\n *   return model.fitDataset(flattenedDataset, {\n *     epochs: 10,\n *     callbacks: {\n *       onEpochEnd: async (epoch, logs) => {\n *         console.log(epoch + ':' + logs.loss);\n *       }\n *     }\n *   });\n * }\n *\n * await run();\n * ```\n *\n * @param source URL or local path to get CSV file. If it's a local path, it\n * must have prefix `file://` and it only works in node environment.\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\n *     of reading and decoding from CSV file(s).\n */\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function csv(\n    source: RequestInfo, csvConfig: CSVConfig = {}): CSVDataset {\n  return new CSVDataset(new URLDataSource(source), csvConfig);\n}\n\n/**\n * Create a `Dataset` that produces each element by calling a provided function.\n *\n * Note that repeated iterations over this `Dataset` may produce different\n * results, because the function will be called anew for each element of each\n * iteration.\n *\n * Also, beware that the sequence of calls to this function may be out of order\n * in time with respect to the logical order of the Dataset. This is due to the\n * asynchronous lazy nature of stream processing, and depends on downstream\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\n * pointer), then the order of the produced elements may be scrambled.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const ds = tf.data.func(func);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param f A function that produces one data element on each call.\n */\nexport function func<T extends TensorContainer>(\n    f: () => IteratorResult<T>| Promise<IteratorResult<T>>): Dataset<T> {\n  const iter = iteratorFromFunction(f);\n  return datasetFromIteratorFn(async () => iter);\n}\n\n/**\n * Create a `Dataset` that produces each element from provided JavaScript\n * generator, which is a function*\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\n * or a function that returns an\n * iterator\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\n *\n * The returned iterator should have `.next()` function that returns element in\n * format of `{value: TensorContainer, done:boolean}`.\n *\n * Example of creating a dataset from an iterator factory:\n * ```js\n * function makeIterator() {\n *   const numElements = 10;\n *   let index = 0;\n *\n *   const iterator = {\n *     next: () => {\n *       let result;\n *       if (index < numElements) {\n *         result = {value: index, done: false};\n *         index++;\n *         return result;\n *       }\n *       return {value: index, done: true};\n *     }\n *   };\n *   return iterator;\n * }\n * const ds = tf.data.generator(makeIterator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * Example of creating a dataset from a generator:\n * ```js\n * function* dataGenerator() {\n *   const numElements = 10;\n *   let index = 0;\n *   while (index < numElements) {\n *     const x = index;\n *     index++;\n *     yield x;\n *   }\n * }\n *\n * const ds = tf.data.generator(dataGenerator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param generator A Javascript generator function that returns a JavaScript\n *     iterator.\n */\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function generator<T extends TensorContainer>(\n    generator: () => Iterator<T>| Promise<Iterator<T>>): Dataset<T> {\n  return datasetFromIteratorFn(async () => {\n    const gen = await generator();\n    return iteratorFromFunction(() => gen.next());\n  });\n}\n\n/**\n * Create an iterator that generate `Tensor`s from webcam video stream. This API\n * only works in Browser environment when the device has webcam.\n *\n * Note: this code snippet only works when the device has a webcam. It will\n * request permission to open the webcam when running.\n * ```js\n * const videoElement = document.createElement('video');\n * videoElement.width = 100;\n * videoElement.height = 100;\n * const cam = await tf.data.webcam(videoElement);\n * const img = await cam.capture();\n * img.print();\n * cam.stop();\n * ```\n *\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\n *     provided to set the generated tensor shape.\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\n *     reading and manipulating data from webcam video stream.\n */\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function webcam(\n    webcamVideoElement?: HTMLVideoElement,\n    webcamConfig?: WebcamConfig): Promise<WebcamIterator> {\n  return WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\n\n/**\n * Create an iterator that generate frequency-domain spectrogram `Tensor`s from\n * microphone audio stream with browser's native FFT. This API only works in\n * browser environment when the device has microphone.\n *\n * Note: this code snippet only works when the device has a microphone. It will\n * request permission to open the microphone when running.\n * ```js\n * const mic = await tf.data.microphone({\n *   fftSize: 1024,\n *   columnTruncateLength: 232,\n *   numFramesPerSpectrogram: 43,\n *   sampleRateHz:44100,\n *   includeSpectrogram: true,\n *   includeWaveform: true\n * });\n * const audioData = await mic.capture();\n * const spectrogramTensor = audioData.spectrogram;\n * spectrogramTensor.print();\n * const waveformTensor = audioData.waveform;\n * waveformTensor.print();\n * mic.stop();\n * ```\n *\n * @param microphoneConfig A `MicrophoneConfig` object that contains\n *     configurations of reading audio data from microphone.\n */\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function microphone(microphoneConfig?: MicrophoneConfig):\n    Promise<MicrophoneIterator> {\n  return MicrophoneIterator.create(microphoneConfig);\n}\n"},"lineCount":null}},"error":null,"hash":"808b827b4df98823bf9d19bd08644a97","cacheData":{"env":{}}}