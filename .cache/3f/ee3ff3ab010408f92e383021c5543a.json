{"id":"../node_modules/@tensorflow/tfjs-vis/dist/show/quality.js","dependencies":[{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\show\\quality.js.map","includedInParent":true,"mtime":1595569813578},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\package.json","includedInParent":true,"mtime":1595925880834},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\package.json","includedInParent":true,"mtime":1595569813578},{"name":"../render/render_utils","loc":{"line":27,"column":31},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\show\\quality.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\render_utils.js"},{"name":"../render/table","loc":{"line":28,"column":24},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\show\\quality.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\table.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst render_utils_1 = require(\"../render/render_utils\");\nconst table_1 = require(\"../render/table\");\n/**\n * Renders a per class accuracy table for classification task evaluation\n *\n * ```js\n * const labels = tf.tensor1d([0, 0, 1, 2, 2, 2]);\n * const predictions = tf.tensor1d([0, 0, 0, 2, 1, 1]);\n *\n * const result = await tfvis.metrics.perClassAccuracy(labels, predictions);\n * console.log(result)\n *\n * const container = {name: 'Per Class Accuracy', tab: 'Evaluation'};\n * const categories = ['cat', 'dog', 'mouse'];\n * await tfvis.show.perClassAccuracy(container, result, categories);\n * ```\n *\n * @param container A `{name: string, tab?: string}` object specifying which\n * surface to render to.\n * @param classAccuracy An `Array<{accuracy: number, count: number}>` array with\n * the accuracy data. See metrics.perClassAccuracy for details on how to\n * generate this object.\n * @param classLabels An array of string labels for the classes in\n * `classAccuracy`. Optional.\n *\n */\nfunction showPerClassAccuracy(container, classAccuracy, classLabels) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const drawArea = render_utils_1.getDrawArea(container);\n        const headers = [\n            'Class',\n            'Accuracy',\n            '# Samples',\n        ];\n        const values = [];\n        for (let i = 0; i < classAccuracy.length; i++) {\n            const label = classLabels ? classLabels[i] : i.toString();\n            const classAcc = classAccuracy[i];\n            values.push([label, classAcc.accuracy, classAcc.count]);\n        }\n        return table_1.table(drawArea, { headers, values });\n    });\n}\nexports.showPerClassAccuracy = showPerClassAccuracy;\n"},"sourceMaps":{"js":{"version":3,"file":"quality.js","sourceRoot":"","sources":["../../src/show/quality.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;;;;;;;;AAEH,yDAAmD;AACnD,2CAAsC;AAGtC;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,SAAsB,oBAAoB,CACtC,SAAmB,EACnB,aAAuD,EACvD,WAAsB;;QACxB,MAAM,QAAQ,GAAG,0BAAW,CAAC,SAAS,CAAC,CAAC;QAExC,MAAM,OAAO,GAAG;YACd,OAAO;YACP,UAAU;YACV,WAAW;SACZ,CAAC;QACF,MAAM,MAAM,GAAoC,EAAE,CAAC;QAEnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,MAAM,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC1D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;SACzD;QAED,OAAO,aAAK,CAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,MAAM,EAAC,CAAC,CAAC;IAC5C,CAAC;CAAA;AApBD,oDAoBC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getDrawArea} from '../render/render_utils';\nimport {table} from '../render/table';\nimport {Drawable} from '../types';\n\n/**\n * Renders a per class accuracy table for classification task evaluation\n *\n * ```js\n * const labels = tf.tensor1d([0, 0, 1, 2, 2, 2]);\n * const predictions = tf.tensor1d([0, 0, 0, 2, 1, 1]);\n *\n * const result = await tfvis.metrics.perClassAccuracy(labels, predictions);\n * console.log(result)\n *\n * const container = {name: 'Per Class Accuracy', tab: 'Evaluation'};\n * const categories = ['cat', 'dog', 'mouse'];\n * await tfvis.show.perClassAccuracy(container, result, categories);\n * ```\n *\n * @param container A `{name: string, tab?: string}` object specifying which\n * surface to render to.\n * @param classAccuracy An `Array<{accuracy: number, count: number}>` array with\n * the accuracy data. See metrics.perClassAccuracy for details on how to\n * generate this object.\n * @param classLabels An array of string labels for the classes in\n * `classAccuracy`. Optional.\n *\n */\nexport async function showPerClassAccuracy(\n    container: Drawable,\n    classAccuracy: Array<{accuracy: number, count: number}>,\n    classLabels?: string[]) {\n  const drawArea = getDrawArea(container);\n\n  const headers = [\n    'Class',\n    'Accuracy',\n    '# Samples',\n  ];\n  const values: Array<Array<(string | number)>> = [];\n\n  for (let i = 0; i < classAccuracy.length; i++) {\n    const label = classLabels ? classLabels[i] : i.toString();\n    const classAcc = classAccuracy[i];\n    values.push([label, classAcc.accuracy, classAcc.count]);\n  }\n\n  return table(drawArea, {headers, values});\n}\n"]}},"error":null,"hash":"12637659df6a30dfc9a61520892ad402","cacheData":{"env":{}}}