{"id":"../node_modules/@tensorflow/tfjs-vis/dist/visor.js","dependencies":[{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\visor.js.map","includedInParent":true,"mtime":1595569813578},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\package.json","includedInParent":true,"mtime":1595925880834},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\package.json","includedInParent":true,"mtime":1595569813578},{"name":"./components/visor","loc":{"line":19,"column":24},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\visor.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\components\\visor.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst visor_1 = require(\"./components/visor\");\nlet visorSingleton;\nconst DEFAULT_TAB = 'Visor';\nconst VISOR_CONTAINER_ID = 'tfjs-visor-container';\n/**\n * The primary interface to the visor is the visor() function.\n *\n * This returns a singleton instance of the Visor class. The\n * singleton object will be replaced if the visor is removed from the DOM for\n * some reason.\n *\n * ```js\n * // Show the visor\n * tfvis.visor();\n * ```\n *\n */\n/** @doc {heading: 'Visor & Surfaces'} */\nfunction visor() {\n    if (typeof document === 'undefined') {\n        throw new Error('No document defined. This library needs a browser/dom to work');\n    }\n    if (document.getElementById(VISOR_CONTAINER_ID) && visorSingleton != null) {\n        return visorSingleton;\n    }\n    // Create the container\n    let visorEl = document.getElementById(VISOR_CONTAINER_ID);\n    if (visorEl == null) {\n        visorEl = document.createElement('div');\n        visorEl.id = VISOR_CONTAINER_ID;\n        document.body.appendChild(visorEl);\n    }\n    let renderRoot;\n    function renderVisor(domNode, surfaceList) {\n        let visorInstance = null;\n        renderRoot = visor_1.VisorComponent.render(domNode, renderRoot, {\n            ref: (r) => visorInstance = r,\n            surfaceList: Array.from(surfaceList.values()),\n        });\n        // Side effect of VisorComponent.render() is to assign visorInstance\n        return visorInstance;\n    }\n    // TODO: consider changing this type. Possibly lift into top level state\n    // object\n    const surfaceList = new Map();\n    const visorComponentInstance = renderVisor(visorEl, surfaceList);\n    visorSingleton =\n        new Visor(visorComponentInstance, visorEl, surfaceList, renderVisor);\n    return visorSingleton;\n}\nexports.visor = visor;\n/**\n * An instance of the visor. An instance of this class is created using the\n * `visor()` function.\n */\n/** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\nclass Visor {\n    constructor(visorComponent, visorEl, surfaceList, renderVisor) {\n        this.visorComponent = visorComponent;\n        this.el = visorEl;\n        this.surfaceList = surfaceList;\n        this.renderVisor = renderVisor;\n    }\n    /**\n     * Creates a surface on the visor\n     *\n     * Most methods in tfjs-vis that take a surface also take a SurfaceInfo\n     * so you rarely need to call this method unless you want to make a custom\n     * plot.\n     *\n     * ```js\n     * // Create a surface on a tab\n     * tfvis.visor().surface({name: 'My Surface', tab: 'My Tab'});\n     * ```\n     *\n     * ```js\n     * // Create a surface and specify its height\n     * tfvis.visor().surface({name: 'Custom Height', tab: 'My Tab', styles: {\n     *    height: 500\n     * }})\n     * ```\n     *\n     * @param options\n     */\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    surface(options) {\n        const { name } = options;\n        const tab = options.tab == null ? DEFAULT_TAB : options.tab;\n        if (name == null ||\n            // tslint:disable-next-line\n            !(typeof name === 'string' || name instanceof String)) {\n            throw new Error(\n            // tslint:disable-next-line\n            'You must pass a config object with a \\'name\\' property to create or retrieve a surface');\n        }\n        const finalOptions = Object.assign({}, options, { tab });\n        const key = `${name}-${tab}`;\n        if (!this.surfaceList.has(key)) {\n            this.surfaceList.set(key, finalOptions);\n        }\n        this.renderVisor(this.el, this.surfaceList);\n        return this.visorComponent.getSurface(name, tab);\n    }\n    /**\n     * Returns a boolean indicating if the visor is in 'fullscreen' mode\n     */\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    isFullscreen() {\n        return this.visorComponent.isFullscreen();\n    }\n    /**\n     * Returns a boolean indicating if the visor is open\n     */\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    isOpen() {\n        return this.visorComponent.isOpen();\n    }\n    /**\n     * Closes the visor.\n     */\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    close() {\n        return this.visorComponent.close();\n    }\n    /**\n     * Opens the visor.\n     */\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    open() {\n        return this.visorComponent.open();\n    }\n    /**\n     * Toggles the visor (closed vs open).\n     */\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    toggle() {\n        return this.visorComponent.toggle();\n    }\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    toggleFullScreen() {\n        return this.visorComponent.toggleFullScreen();\n    }\n    /**\n     * Binds the ~ (tilde) key to toggle the visor.\n     *\n     * This is called by default when the visor is initially created.\n     */\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    bindKeys() {\n        return this.visorComponent.bindKeys();\n    }\n    /**\n     * Unbinds the keyboard control to toggle the visor.\n     */\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    unbindKeys() {\n        return this.visorComponent.unbindKeys();\n    }\n    /**\n     * Sets the active tab for the visor.\n     */\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n    setActiveTab(tabName) {\n        const tabs = this.visorComponent.state.tabs;\n        if (!tabs.has(tabName)) {\n            throw new Error(`Tab '${tabName}' does not exist`);\n        }\n        this.visorComponent.setState({ activeTab: tabName });\n    }\n}\nexports.Visor = Visor;\n"},"sourceMaps":{"js":{"version":3,"file":"visor.js","sourceRoot":"","sources":["../src/visor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {VisorComponent} from './components/visor';\nimport {SurfaceInfo, SurfaceInfoStrict} from './types';\n\nlet visorSingleton: Visor;\nconst DEFAULT_TAB = 'Visor';\nconst VISOR_CONTAINER_ID = 'tfjs-visor-container';\n\n/**\n * The primary interface to the visor is the visor() function.\n *\n * This returns a singleton instance of the Visor class. The\n * singleton object will be replaced if the visor is removed from the DOM for\n * some reason.\n *\n * ```js\n * // Show the visor\n * tfvis.visor();\n * ```\n *\n */\n/** @doc {heading: 'Visor & Surfaces'} */\nexport function visor(): Visor {\n  if (typeof document === 'undefined') {\n    throw new Error(\n        'No document defined. This library needs a browser/dom to work');\n  }\n\n  if (document.getElementById(VISOR_CONTAINER_ID) && visorSingleton != null) {\n    return visorSingleton;\n  }\n\n  // Create the container\n  let visorEl = document.getElementById(VISOR_CONTAINER_ID);\n\n  if (visorEl == null) {\n    visorEl = document.createElement('div');\n    visorEl.id = VISOR_CONTAINER_ID;\n    document.body.appendChild(visorEl);\n  }\n\n  let renderRoot: Element;\n  function renderVisor(\n      domNode: HTMLElement,\n      surfaceList: Map<string, SurfaceInfoStrict>): VisorComponent {\n    let visorInstance: VisorComponent = null;\n    renderRoot = VisorComponent.render(domNode, renderRoot, {\n      ref: (r: VisorComponent) => visorInstance = r,\n      surfaceList: Array.from(surfaceList.values()),\n    });\n    // Side effect of VisorComponent.render() is to assign visorInstance\n    return visorInstance;\n  }\n\n  // TODO: consider changing this type. Possibly lift into top level state\n  // object\n  const surfaceList: Map<string, SurfaceInfoStrict> = new Map();\n  const visorComponentInstance: VisorComponent =\n      renderVisor(visorEl, surfaceList);\n\n  visorSingleton =\n      new Visor(visorComponentInstance, visorEl, surfaceList, renderVisor);\n\n  return visorSingleton;\n}\n\n/**\n * An instance of the visor. An instance of this class is created using the\n * `visor()` function.\n */\n/** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\nexport class Visor {\n  private visorComponent: VisorComponent;\n  private surfaceList: Map<string, SurfaceInfoStrict>;\n  private renderVisor:\n      (domNode: HTMLElement,\n       surfaceList: Map<string, SurfaceInfoStrict>) => VisorComponent;\n\n  /**\n   * The underlying html element of the visor.\n   */\n  public el: HTMLElement;\n\n  constructor(\n      visorComponent: VisorComponent, visorEl: HTMLElement,\n      surfaceList: Map<string, SurfaceInfoStrict>,\n      renderVisor:\n          (domNode: HTMLElement,\n           surfaceList: Map<string, SurfaceInfoStrict>) => VisorComponent) {\n    this.visorComponent = visorComponent;\n    this.el = visorEl;\n    this.surfaceList = surfaceList;\n    this.renderVisor = renderVisor;\n  }\n\n  /**\n   * Creates a surface on the visor\n   *\n   * Most methods in tfjs-vis that take a surface also take a SurfaceInfo\n   * so you rarely need to call this method unless you want to make a custom\n   * plot.\n   *\n   * ```js\n   * // Create a surface on a tab\n   * tfvis.visor().surface({name: 'My Surface', tab: 'My Tab'});\n   * ```\n   *\n   * ```js\n   * // Create a surface and specify its height\n   * tfvis.visor().surface({name: 'Custom Height', tab: 'My Tab', styles: {\n   *    height: 500\n   * }})\n   * ```\n   *\n   * @param options\n   */\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  surface(options: SurfaceInfo) {\n    const {name} = options;\n    const tab = options.tab == null ? DEFAULT_TAB : options.tab;\n\n    if (name == null ||\n        // tslint:disable-next-line\n        !(typeof name === 'string' || name as any instanceof String)) {\n      throw new Error(\n          // tslint:disable-next-line\n          'You must pass a config object with a \\'name\\' property to create or retrieve a surface');\n    }\n\n    const finalOptions: SurfaceInfoStrict = {\n      ...options,\n      tab,\n    };\n\n    const key = `${name}-${tab}`;\n    if (!this.surfaceList.has(key)) {\n      this.surfaceList.set(key, finalOptions);\n    }\n\n    this.renderVisor(this.el, this.surfaceList);\n    return this.visorComponent.getSurface(name, tab);\n  }\n\n  /**\n   * Returns a boolean indicating if the visor is in 'fullscreen' mode\n   */\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  isFullscreen() {\n    return this.visorComponent.isFullscreen();\n  }\n\n  /**\n   * Returns a boolean indicating if the visor is open\n   */\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  isOpen() {\n    return this.visorComponent.isOpen();\n  }\n\n  /**\n   * Closes the visor.\n   */\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  close() {\n    return this.visorComponent.close();\n  }\n\n  /**\n   * Opens the visor.\n   */\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  open() {\n    return this.visorComponent.open();\n  }\n\n  /**\n   * Toggles the visor (closed vs open).\n   */\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  toggle() {\n    return this.visorComponent.toggle();\n  }\n\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  toggleFullScreen() {\n    return this.visorComponent.toggleFullScreen();\n  }\n\n  /**\n   * Binds the ~ (tilde) key to toggle the visor.\n   *\n   * This is called by default when the visor is initially created.\n   */\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  bindKeys() {\n    return this.visorComponent.bindKeys();\n  }\n\n  /**\n   * Unbinds the keyboard control to toggle the visor.\n   */\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  unbindKeys() {\n    return this.visorComponent.unbindKeys();\n  }\n\n  /**\n   * Sets the active tab for the visor.\n   */\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n  setActiveTab(tabName: string) {\n    const tabs = this.visorComponent.state.tabs;\n    if (!tabs.has(tabName)) {\n      throw new Error(`Tab '${tabName}' does not exist`);\n    }\n    this.visorComponent.setState({activeTab: tabName});\n  }\n}\n"]}},"error":null,"hash":"4e712d898569b9014263cec16a50afc3","cacheData":{"env":{}}}