{"id":"../node_modules/vega-expression/index.js","dependencies":[{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\package.json","includedInParent":true,"mtime":1595925880834},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\package.json","includedInParent":true,"mtime":1595569810977},{"name":"./src/ast","loc":{"line":15,"column":7},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\index.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\src\\ast.js"},{"name":"./src/parser","loc":{"line":17,"column":32},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\index.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\src\\parser.js"},{"name":"./src/codegen","loc":{"line":18,"column":35},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\index.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\src\\codegen.js"},{"name":"./src/functions","loc":{"line":19,"column":37},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\index.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\src\\functions.js"},{"name":"./src/constants","loc":{"line":20,"column":37},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\index.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-expression\\src\\constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"RawCode\", {\n  enumerable: true,\n  get: function () {\n    return _ast.RawCode;\n  }\n});\nObject.defineProperty(exports, \"Literal\", {\n  enumerable: true,\n  get: function () {\n    return _ast.Literal;\n  }\n});\nObject.defineProperty(exports, \"Property\", {\n  enumerable: true,\n  get: function () {\n    return _ast.Property;\n  }\n});\nObject.defineProperty(exports, \"Identifier\", {\n  enumerable: true,\n  get: function () {\n    return _ast.Identifier;\n  }\n});\nObject.defineProperty(exports, \"ArrayExpression\", {\n  enumerable: true,\n  get: function () {\n    return _ast.ArrayExpression;\n  }\n});\nObject.defineProperty(exports, \"BinaryExpression\", {\n  enumerable: true,\n  get: function () {\n    return _ast.BinaryExpression;\n  }\n});\nObject.defineProperty(exports, \"CallExpression\", {\n  enumerable: true,\n  get: function () {\n    return _ast.CallExpression;\n  }\n});\nObject.defineProperty(exports, \"ConditionalExpression\", {\n  enumerable: true,\n  get: function () {\n    return _ast.ConditionalExpression;\n  }\n});\nObject.defineProperty(exports, \"LogicalExpression\", {\n  enumerable: true,\n  get: function () {\n    return _ast.LogicalExpression;\n  }\n});\nObject.defineProperty(exports, \"MemberExpression\", {\n  enumerable: true,\n  get: function () {\n    return _ast.MemberExpression;\n  }\n});\nObject.defineProperty(exports, \"ObjectExpression\", {\n  enumerable: true,\n  get: function () {\n    return _ast.ObjectExpression;\n  }\n});\nObject.defineProperty(exports, \"UnaryExpression\", {\n  enumerable: true,\n  get: function () {\n    return _ast.UnaryExpression;\n  }\n});\nObject.defineProperty(exports, \"ASTNode\", {\n  enumerable: true,\n  get: function () {\n    return _ast.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parser.default;\n  }\n});\nObject.defineProperty(exports, \"codegen\", {\n  enumerable: true,\n  get: function () {\n    return _codegen.default;\n  }\n});\nObject.defineProperty(exports, \"functions\", {\n  enumerable: true,\n  get: function () {\n    return _functions.default;\n  }\n});\nObject.defineProperty(exports, \"constants\", {\n  enumerable: true,\n  get: function () {\n    return _constants.default;\n  }\n});\n\nvar _ast = _interopRequireWildcard(require(\"./src/ast\"));\n\nvar _parser = _interopRequireDefault(require(\"./src/parser\"));\n\nvar _codegen = _interopRequireDefault(require(\"./src/codegen\"));\n\nvar _functions = _interopRequireDefault(require(\"./src/functions\"));\n\nvar _constants = _interopRequireDefault(require(\"./src/constants\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":109,"column":0},"source":"../node_modules/vega-expression/index.js","original":{"line":1,"column":0}},{"generated":{"line":111,"column":0},"source":"../node_modules/vega-expression/index.js","original":{"line":17,"column":0}},{"generated":{"line":113,"column":0},"source":"../node_modules/vega-expression/index.js","original":{"line":18,"column":0}},{"generated":{"line":115,"column":0},"source":"../node_modules/vega-expression/index.js","original":{"line":19,"column":0}},{"generated":{"line":117,"column":0},"source":"../node_modules/vega-expression/index.js","original":{"line":20,"column":0}}],"sources":{"../node_modules/vega-expression/index.js":"export {\n  RawCode,\n  Literal,\n  Property,\n  Identifier,\n  ArrayExpression,\n  BinaryExpression,\n  CallExpression,\n  ConditionalExpression,\n  LogicalExpression,\n  MemberExpression,\n  ObjectExpression,\n  UnaryExpression,\n  default as ASTNode\n} from './src/ast';\n\nexport { default as parse} from './src/parser';\nexport { default as codegen } from './src/codegen';\nexport { default as functions } from './src/functions';\nexport { default as constants } from './src/constants';\n"},"lineCount":null}},"error":null,"hash":"ab8cc5e50758ef0d4b9258560d7f082c","cacheData":{"env":{}}}