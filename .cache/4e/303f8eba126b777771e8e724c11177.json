{"id":"../node_modules/@tensorflow/tfjs-vis/dist/render/linechart.js","dependencies":[{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\linechart.js.map","includedInParent":true,"mtime":1595569813578},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\package.json","includedInParent":true,"mtime":1595925880834},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\package.json","includedInParent":true,"mtime":1595569813578},{"name":"vega-embed","loc":{"line":30,"column":45},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\linechart.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-embed\\build\\src\\embed.js"},{"name":"../util/dom","loc":{"line":31,"column":22},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\linechart.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\util\\dom.js"},{"name":"../util/utils","loc":{"line":32,"column":24},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\linechart.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\util\\utils.js"},{"name":"./render_utils","loc":{"line":33,"column":31},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\linechart.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\render_utils.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vega_embed_1 = __importDefault(require(\"vega-embed\"));\nconst dom_1 = require(\"../util/dom\");\nconst utils_1 = require(\"../util/utils\");\nconst render_utils_1 = require(\"./render_utils\");\n/**\n * Renders a line chart\n *\n * ```js\n * const series1 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 50))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series2 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 150))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series = ['First', 'Second'];\n * const data = { values: [series1, series2], series }\n *\n * const surface = { name: 'Line chart', tab: 'Charts' };\n * tfvis.render.linechart(surface, data);\n * ```\n *\n * ```js\n * const series1 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 + 50)\n *   .map((y, x) => ({ x, y, }));\n *\n * const data = { values: [series1] }\n *\n * // Render to visor\n * const surface = { name: 'Zoomed Line Chart', tab: 'Charts' };\n * tfvis.render.linechart(surface, data, { zoomToFit: true });\n * ```\n *\n */\n/** @doc {heading: 'Charts', namespace: 'render'} */\nfunction linechart(container, data, opts = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Nest data if necessary before further processing\n        const _data = Array.isArray(data.values[0]) ? data.values :\n            [data.values];\n        const numValues = _data[0].length;\n        // Create series names if none were passed in.\n        const _series = data.series ? data.series : _data.map((_, i) => `Series ${i + 1}`);\n        utils_1.assert(_series.length === _data.length, 'Must have an equal number of series labels as there are data series');\n        if (opts.seriesColors != null) {\n            utils_1.assert(opts.seriesColors.length === _data.length, 'Must have an equal number of series colors as there are data series');\n        }\n        const vlChartValues = [];\n        for (let valueIdx = 0; valueIdx < numValues; valueIdx++) {\n            const v = {\n                x: valueIdx,\n            };\n            _series.forEach((seriesName, seriesIdx) => {\n                const seriesValue = _data[seriesIdx][valueIdx].y;\n                v[seriesName] = seriesValue;\n                v[`${seriesName}-name`] = seriesName;\n            });\n            vlChartValues.push(v);\n        }\n        const options = Object.assign({}, defaultOpts, opts);\n        const yScale = () => {\n            if (options.zoomToFit) {\n                return { 'zero': false };\n            }\n            else if (options.yAxisDomain != null) {\n                return { 'domain': options.yAxisDomain };\n            }\n            return undefined;\n        };\n        const sharedEncoding = {\n            x: {\n                field: 'x',\n                type: options.xType,\n                title: options.xLabel,\n            },\n            tooltip: [\n                { field: 'x', type: 'quantitative' },\n                ..._series.map(seriesName => {\n                    return {\n                        field: seriesName,\n                        type: 'quantitative',\n                    };\n                }),\n            ]\n        };\n        const lineLayers = _series.map((seriesName) => {\n            return {\n                // data will be defined at the chart level.\n                'data': undefined,\n                'mark': { 'type': 'line', 'clip': true },\n                'encoding': {\n                    // Note: the encoding for 'x' is shared\n                    // Add a y encoding for this series\n                    'y': {\n                        'field': seriesName,\n                        'type': options.yType,\n                        'title': options.yLabel,\n                        'scale': yScale(),\n                    },\n                    'color': {\n                        'field': `${seriesName}-name`,\n                        'type': 'nominal',\n                        'legend': { 'values': _series, title: null },\n                        'scale': {\n                            'range': options.seriesColors,\n                        }\n                    },\n                }\n            };\n        });\n        const tooltipLayer = {\n            'mark': 'rule',\n            'selection': {\n                'hover': {\n                    'type': 'single',\n                    'on': 'mouseover',\n                    'nearest': true,\n                    clear: 'mouseout',\n                }\n            },\n            'encoding': {\n                'color': {\n                    'value': 'grey',\n                    'condition': {\n                        'selection': { 'not': 'hover' },\n                        'value': 'transparent',\n                    }\n                }\n            }\n        };\n        const drawArea = render_utils_1.getDrawArea(container);\n        const spec = {\n            'width': options.width || dom_1.getDefaultWidth(drawArea),\n            'height': options.height || dom_1.getDefaultHeight(drawArea),\n            'padding': 0,\n            'autosize': {\n                'type': 'fit',\n                'contains': 'padding',\n                'resize': true,\n            },\n            'config': {\n                'axis': {\n                    'labelFontSize': options.fontSize,\n                    'titleFontSize': options.fontSize,\n                },\n                'text': { 'fontSize': options.fontSize },\n                'legend': {\n                    'labelFontSize': options.fontSize,\n                    'titleFontSize': options.fontSize,\n                }\n            },\n            'data': { 'values': vlChartValues },\n            'encoding': sharedEncoding,\n            'layer': [\n                ...lineLayers,\n                tooltipLayer,\n            ],\n        };\n        const embedOpts = {\n            actions: false,\n            mode: 'vega-lite',\n            defaultStyle: false,\n        };\n        yield vega_embed_1.default(drawArea, spec, embedOpts);\n        return Promise.resolve();\n    });\n}\nexports.linechart = linechart;\nconst defaultOpts = {\n    xLabel: 'x',\n    yLabel: 'y',\n    xType: 'quantitative',\n    yType: 'quantitative',\n    zoomToFit: false,\n    fontSize: 11,\n};\n"},"sourceMaps":{"js":{"version":3,"file":"linechart.js","sourceRoot":"","sources":["../../src/render/linechart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport embed, {Mode, VisualizationSpec} from 'vega-embed';\nimport {TopLevelSpec} from 'vega-lite';\n\nimport {Drawable, Point2D, XYPlotData, XYPlotOptions} from '../types';\nimport {getDefaultHeight, getDefaultWidth} from '../util/dom';\nimport {assert} from '../util/utils';\n\nimport {getDrawArea} from './render_utils';\n\n/**\n * Renders a line chart\n *\n * ```js\n * const series1 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 50))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series2 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 150))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series = ['First', 'Second'];\n * const data = { values: [series1, series2], series }\n *\n * const surface = { name: 'Line chart', tab: 'Charts' };\n * tfvis.render.linechart(surface, data);\n * ```\n *\n * ```js\n * const series1 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 + 50)\n *   .map((y, x) => ({ x, y, }));\n *\n * const data = { values: [series1] }\n *\n * // Render to visor\n * const surface = { name: 'Zoomed Line Chart', tab: 'Charts' };\n * tfvis.render.linechart(surface, data, { zoomToFit: true });\n * ```\n *\n */\n/** @doc {heading: 'Charts', namespace: 'render'} */\nexport async function linechart(\n    container: Drawable, data: XYPlotData,\n    opts: XYPlotOptions = {}): Promise<void> {\n  // Nest data if necessary before further processing\n  const _data = Array.isArray(data.values[0]) ? data.values as Point2D[][] :\n                                                [data.values] as Point2D[][];\n  const numValues = _data[0].length;\n\n  // Create series names if none were passed in.\n  const _series: string[] =\n      data.series ? data.series : _data.map((_, i) => `Series ${i + 1}`);\n  assert(\n      _series.length === _data.length,\n      'Must have an equal number of series labels as there are data series');\n\n  if (opts.seriesColors != null) {\n    assert(\n        opts.seriesColors.length === _data.length,\n        'Must have an equal number of series colors as there are data series');\n  }\n\n  const vlChartValues: VLChartValue[] = [];\n  for (let valueIdx = 0; valueIdx < numValues; valueIdx++) {\n    const v: VLChartValue = {\n      x: valueIdx,\n    };\n\n    _series.forEach((seriesName, seriesIdx) => {\n      const seriesValue = _data[seriesIdx][valueIdx].y;\n      v[seriesName] = seriesValue;\n      v[`${seriesName}-name`] = seriesName;\n    });\n    vlChartValues.push(v);\n  }\n\n  const options = Object.assign({}, defaultOpts, opts);\n\n  const yScale = (): {}|undefined => {\n    if (options.zoomToFit) {\n      return {'zero': false};\n    } else if (options.yAxisDomain != null) {\n      return {'domain': options.yAxisDomain};\n    }\n    return undefined;\n  };\n\n  const sharedEncoding = {\n    x: {\n      field: 'x',\n      type: options.xType,\n      title: options.xLabel,\n    },\n    tooltip: [\n      {field: 'x', type: 'quantitative'},\n      ..._series.map(seriesName => {\n        return {\n          field: seriesName,\n          type: 'quantitative',\n        };\n      }),\n    ]\n  };\n\n  const lineLayers: TopLevelSpec[] = _series.map((seriesName) => {\n    return {\n      // data will be defined at the chart level.\n      'data': undefined,\n      'mark': {'type': 'line', 'clip': true},\n      'encoding': {\n        // Note: the encoding for 'x' is shared\n        // Add a y encoding for this series\n        'y': {\n          'field': seriesName,\n          'type': options.yType,\n          'title': options.yLabel,\n          'scale': yScale(),\n        },\n        'color': {\n          'field': `${seriesName}-name`,\n          'type': 'nominal',\n          'legend': {'values': _series, title: null},\n          'scale': {\n            'range': options.seriesColors,\n          }\n        },\n      }\n    };\n  });\n\n  const tooltipLayer = {\n    'mark': 'rule',\n    'selection': {\n      'hover': {\n        'type': 'single',\n        'on': 'mouseover',\n        'nearest': true,\n        clear: 'mouseout',\n      }\n    },\n    'encoding': {\n      'color': {\n        'value': 'grey',\n        'condition': {\n          'selection': {'not': 'hover'},\n          'value': 'transparent',\n        }\n      }\n    }\n  };\n\n  const drawArea = getDrawArea(container);\n  const spec = {\n    'width': options.width || getDefaultWidth(drawArea),\n    'height': options.height || getDefaultHeight(drawArea),\n    'padding': 0,\n    'autosize': {\n      'type': 'fit',\n      'contains': 'padding',\n      'resize': true,\n    },\n    'config': {\n      'axis': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      },\n      'text': {'fontSize': options.fontSize},\n      'legend': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      }\n    },\n    'data': {'values': vlChartValues},\n    'encoding': sharedEncoding,\n    'layer': [\n      ...lineLayers,\n      tooltipLayer,\n    ],\n  };\n\n  const embedOpts = {\n    actions: false,\n    mode: 'vega-lite' as Mode,\n    defaultStyle: false,\n  };\n\n  await embed(drawArea, spec as VisualizationSpec, embedOpts);\n  return Promise.resolve();\n}\n\nconst defaultOpts = {\n  xLabel: 'x',\n  yLabel: 'y',\n  xType: 'quantitative',\n  yType: 'quantitative',\n  zoomToFit: false,\n  fontSize: 11,\n};\n\ninterface VLChartValue {\n  x: number;\n  [key: string]: string|number;\n}\n"]}},"error":null,"hash":"5cde6372a3a65895a0ec787f7318fa06","cacheData":{"env":{}}}