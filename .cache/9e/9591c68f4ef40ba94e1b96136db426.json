{"id":"../node_modules/@tensorflow/tfjs-vis/dist/types.js","dependencies":[{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\types.js.map","includedInParent":true,"mtime":1595569813578},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\package.json","includedInParent":true,"mtime":1595925880834},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\package.json","includedInParent":true,"mtime":1595569813578}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isSurfaceInfo(drawable) {\n    if (drawable.name != null) {\n        return true;\n    }\n    return false;\n}\nexports.isSurfaceInfo = isSurfaceInfo;\nfunction isSurface(drawable) {\n    if (drawable.drawArea instanceof HTMLElement) {\n        return true;\n    }\n    return false;\n}\nexports.isSurface = isSurface;\n"},"sourceMaps":{"js":{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;AA0FA,SAAgB,aAAa,CAAC,QAAkB;IAC9C,IAAK,QAAwB,CAAC,IAAI,IAAI,IAAI,EAAE;QAC1C,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AALD,sCAKC;AAED,SAAgB,SAAS,CAAC,QAAkB;IAC1C,IAAK,QAAoB,CAAC,QAAQ,YAAY,WAAW,EAAE;QACzD,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AALD,8BAKC","sourcesContent":["import {Tensor2D} from '@tensorflow/tfjs';\n\n/*\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Types shared across the project and that users will commonly interact with\n\n/**\n * The public api of a 'surface'\n */\nexport interface Surface {\n  /**\n   * The containing HTML element for this surface\n   */\n  container: HTMLElement;\n\n  /**\n   * A textual label for the surface.\n   */\n  label: HTMLElement;\n\n  /**\n   * A container for plots and other renderings\n   */\n  drawArea: HTMLElement;\n}\n\n/**\n * Options used to specify a surface.\n *\n * name and tab are also used for retrieval of a surface instance.\n */\nexport interface SurfaceInfo {\n  /**\n   * The name / label of this surface\n   */\n  name: string;\n\n  /**\n   * The name of the tab this surface should appear on\n   */\n  tab?: string;\n\n  /**\n   * Display Styles for the surface\n   */\n  styles?: StyleOptions;\n}\n\n/**\n * Internally all surfaces must have a tab.\n */\nexport interface SurfaceInfoStrict extends SurfaceInfo {\n  name: string;\n  tab: string;\n  styles?: StyleOptions;\n}\n\n/**\n * Style properties are generally optional as components will specify defaults.\n */\nexport interface StyleOptions {\n  width?: string;\n  height?: string;\n  maxWidth?: string;\n  maxHeight?: string;\n}\n\n/**\n * @docalias HTMLElement|{name: string, tab?: string}|Surface|{drawArea:\n * HTMLElement}\n */\nexport type Drawable = HTMLElement|Surface|SurfaceInfo|{\n  drawArea: HTMLElement;\n};\n\nexport function isSurfaceInfo(drawable: Drawable): drawable is SurfaceInfo {\n  if ((drawable as SurfaceInfo).name != null) {\n    return true;\n  }\n  return false;\n}\n\nexport function isSurface(drawable: Drawable): drawable is Surface {\n  if ((drawable as Surface).drawArea instanceof HTMLElement) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Common visualisation options for '.render' functions.\n */\nexport interface VisOptions {\n  /**\n   * Width of chart in px\n   */\n  width?: number;\n  /**\n   * Height of chart in px\n   */\n  height?: number;\n  /**\n   * Label for xAxis\n   */\n  xLabel?: string;\n  /**\n   * Label for yAxis\n   */\n  yLabel?: string;\n  /**\n   * Fontsize in px\n   */\n  fontSize?: number;\n  /**\n   * Will be set automatically\n   */\n  xType?: 'quantitative'|'ordinal'|'nominal';\n  /**\n   * Will be set automatically\n   */\n  yType?: 'quantitative'|'ordinal'|'nominal';\n}\n\n/**\n * Options for XY plots\n */\nexport interface XYPlotOptions extends VisOptions {\n  /**\n   * domain of the x axis. Overriden by zoomToFit\n   */\n  xAxisDomain?: [number, number];\n  /**\n   * domain of the y axis. Overriden by zoomToFit\n   */\n  yAxisDomain?: [number, number];\n  /**\n   * Set the chart bounds to just fit the data. This may modify the axis scales\n   * but allows fitting more data into view.\n   */\n  zoomToFit?: boolean;\n  /**\n   * Colors to for each series plotted. An array of valid CSS color strings.\n   */\n  seriesColors?: string[];\n}\n\n/**\n * Data format for XY plots\n */\nexport interface XYPlotData {\n  /**\n   * An array (or nested array) of {x, y} tuples.\n   */\n  values: Point2D[][]|Point2D[];\n  /**\n   * Series names/labels\n   */\n  series?: string[];\n}\n\n/**\n * Histogram options.\n */\nexport interface HistogramOpts extends VisOptions {\n  /**\n   * By default a histogram will also compute and display summary statistics.\n   * If stats is set to false then summary statistics will not be displayed.\n   *\n   * Pre computed stats can also be passed in and should have the following\n   * format:\n   *  {\n   *    numVals?: number,\n   *    min?: number,\n   *    max?: number,\n   *    numNans?: number,\n   *    numZeros?: number,\n   *    numInfs?: number,\n   *  }\n   */\n  stats?: HistogramStats|false;\n\n  /**\n   * Maximum number of bins in histogram.\n   */\n  maxBins?: number;\n\n  /**\n   * Fill color for bars. Should be a valid CSS color string\n   */\n  color?: string;\n}\n\n/**\n * Bar chart options.\n */\nexport interface BarChartOpts extends VisOptions {\n  /**\n   * Fill color for bars. Should be a valid CSS color string\n   */\n  color?: string|string[];\n}\n\n/**\n * Summary statistics for histogram.\n */\nexport interface HistogramStats {\n  numVals?: number;\n  min?: number;\n  max?: number;\n  numNans?: number;\n  numZeros?: number;\n  numInfs?: number;\n}\n\n/**\n * Type alias for typed arrays\n */\nexport type TypedArray = Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|\n    Uint32Array|Uint8ClampedArray|Float32Array|Float64Array;\n\n/**\n * An object with a 'values' property and a 'labels' property.\n */\nexport interface ConfusionMatrixData {\n  /**\n   * a square matrix of numbers representing counts for each (label, prediction)\n   * pair\n   */\n  values: number[][];\n\n  /**\n   * Human readable labels for each class in the matrix. Optional\n   */\n  tickLabels?: string[];\n}\n\nexport interface ConfusionMatrixOptions extends VisOptions {\n  /**\n   * Color cells on the diagonal. Defaults to true\n   */\n  shadeDiagonal?: boolean;\n  /**\n   * render the values of each cell as text. Defaults to true\n   */\n  showTextOverlay?: boolean;\n  /**\n   * Output range of color scale. Either a 2 element array of valid\n   * css color or one of 'greyscale'|'viridis'|'blues'\n   */\n  colorMap?: NamedColorMap|[string, string];\n}\n\n/**\n * Datum format for scatter and line plots\n */\nexport interface Point2D {\n  x: number;\n  y: number;\n}\n\n/**\n *  An object with a 'values' property and a 'labels' property.\n */\nexport interface HeatmapData {\n  /**\n   * Matrix of values in column-major order.\n   *\n   * Row major order is supported by setting a boolean in options.\n   */\n  values: number[][]|Tensor2D;\n  /**\n   * x axis tick labels\n   */\n  xTickLabels?: string[];\n  /**\n   * y axis tick labels\n   */\n  yTickLabels?: string[];\n}\n\n/**\n * Color map names.\n */\n/** @docinline */\nexport type NamedColorMap = 'greyscale'|'viridis'|'blues';\n\n/**\n * Visualization options for Heatmap\n */\nexport interface HeatmapOptions extends VisOptions {\n  /**\n   * Defaults to viridis\n   */\n  colorMap?: NamedColorMap;\n\n  /**\n   * Custom input domain for the color scale.\n   * Useful if you want to plot multiple heatmaps using the same scale.\n   */\n  domain?: number[];\n\n  /**\n   * Pass in data values in row-major order.\n   *\n   * Internally this will transpose the data values before rendering.\n   */\n  rowMajor?: boolean;\n}\n\n/**\n * Data format for render.table\n */\nexport interface TableData {\n  /**\n   * Column names\n   */\n  headers: string[];\n\n  /**\n   * An array of arrays (one for  each row). The inner\n   * array length usually matches the length of data.headers.\n   *\n   * Typically the values are numbers or strings.\n   */\n  // tslint:disable-next-line:no-any\n  values: any[][];\n}\n"]}},"error":null,"hash":"24ac388ff653f39ea564a43dd9d616e2","cacheData":{"env":{}}}