{"id":"../node_modules/@tensorflow/tfjs-vis/dist/render/histogram.js","dependencies":[{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\histogram.js.map","includedInParent":true,"mtime":1595569813578},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\package.json","includedInParent":true,"mtime":1595925880834},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\package.json","includedInParent":true,"mtime":1595569813578},{"name":"d3-format","loc":{"line":30,"column":28},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\histogram.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\node_modules\\d3-format\\src\\index.js"},{"name":"vega-embed","loc":{"line":31,"column":45},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\histogram.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\vega-embed\\build\\src\\embed.js"},{"name":"../util/dom","loc":{"line":32,"column":22},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\histogram.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\util\\dom.js"},{"name":"../util/math","loc":{"line":33,"column":23},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\histogram.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\util\\math.js"},{"name":"./table","loc":{"line":34,"column":24},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\histogram.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\render\\table.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst d3_format_1 = require(\"d3-format\");\nconst vega_embed_1 = __importDefault(require(\"vega-embed\"));\nconst dom_1 = require(\"../util/dom\");\nconst math_1 = require(\"../util/math\");\nconst table_1 = require(\"./table\");\nconst defaultOpts = {\n    maxBins: 12,\n    fontSize: 11,\n};\n/**\n * Renders a histogram of values\n *\n * ```js\n * const data = Array(100).fill(0)\n *   .map(x => Math.random() * 100 - (Math.random() * 50))\n *\n * // Push some special values for the stats table.\n * data.push(Infinity);\n * data.push(NaN);\n * data.push(0);\n *\n * const surface = { name: 'Histogram', tab: 'Charts' };\n * tfvis.render.histogram(surface, data);\n * ```\n */\n/** @doc {heading: 'Charts', namespace: 'render'} */\nfunction histogram(container, data, opts = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const values = prepareData(data);\n        const options = Object.assign({}, defaultOpts, opts);\n        const embedOpts = {\n            actions: false,\n            mode: 'vega-lite',\n            defaultStyle: false,\n        };\n        const histogramContainer = dom_1.subSurface(container, 'histogram');\n        if (opts.stats !== false) {\n            const statsContainer = dom_1.subSurface(container, 'stats', {\n                prepend: true,\n            });\n            let stats;\n            if (opts.stats) {\n                stats = opts.stats;\n            }\n            else {\n                stats = math_1.arrayStats(values.map(x => x.value));\n            }\n            renderStats(stats, statsContainer, { fontSize: options.fontSize });\n        }\n        // If there are no data values return early\n        if (values.length === 0) {\n            return undefined;\n        }\n        // Now that we have rendered stats we need to remove any NaNs and Infinities\n        // before rendering the histogram\n        const filtered = [];\n        for (let i = 0; i < values.length; i++) {\n            const val = values[i].value;\n            if (val != null && isFinite(val)) {\n                filtered.push(values[i]);\n            }\n        }\n        const histogramSpec = {\n            'width': options.width || dom_1.getDefaultWidth(histogramContainer),\n            'height': options.height || dom_1.getDefaultHeight(histogramContainer),\n            'padding': 0,\n            'autosize': {\n                'type': 'fit',\n                'contains': 'padding',\n                'resize': true,\n            },\n            'data': { 'values': filtered },\n            'mark': {\n                'type': 'bar',\n                'tooltip': true,\n            },\n            'config': {\n                'axis': {\n                    'labelFontSize': options.fontSize,\n                    'titleFontSize': options.fontSize,\n                },\n                'text': { 'fontSize': options.fontSize },\n                'legend': {\n                    'labelFontSize': options.fontSize,\n                    'titleFontSize': options.fontSize,\n                }\n            },\n            'encoding': {\n                'x': {\n                    'bin': { 'maxbins': options.maxBins },\n                    'field': 'value',\n                    'type': 'quantitative',\n                },\n                'y': {\n                    'aggregate': 'count',\n                    'type': 'quantitative',\n                },\n                'color': {\n                    'value': options.color || '#001B44',\n                }\n            }\n        };\n        return vega_embed_1.default(histogramContainer, histogramSpec, embedOpts);\n    });\n}\nexports.histogram = histogram;\nfunction renderStats(stats, container, opts) {\n    const format = d3_format_1.format(',.4~f');\n    const pctFormat = d3_format_1.format('.4~p');\n    const headers = [];\n    const vals = [];\n    if (stats.numVals != null) {\n        headers.push('Num Vals');\n        vals.push(format(stats.numVals));\n    }\n    if (stats.min != null) {\n        headers.push('Min');\n        vals.push(format(stats.min));\n    }\n    if (stats.max != null) {\n        headers.push('Max');\n        vals.push(format(stats.max));\n    }\n    if (stats.numZeros != null) {\n        headers.push('# Zeros');\n        let zeroPct = '';\n        if (stats.numVals) {\n            zeroPct = stats.numZeros > 0 ?\n                `(${pctFormat(stats.numZeros / stats.numVals)})` :\n                '';\n        }\n        vals.push(`${format(stats.numZeros)} ${zeroPct}`);\n    }\n    if (stats.numNans != null) {\n        headers.push('# NaNs');\n        let nanPct = '';\n        if (stats.numVals) {\n            nanPct = stats.numNans > 0 ?\n                `(${pctFormat(stats.numNans / stats.numVals)})` :\n                '';\n        }\n        vals.push(`${format(stats.numNans)} ${nanPct}`);\n    }\n    if (stats.numInfs != null) {\n        headers.push('# Infinity');\n        let infPct = '';\n        if (stats.numVals) {\n            infPct = stats.numInfs > 0 ?\n                `(${pctFormat(stats.numInfs / stats.numVals)})` :\n                '';\n        }\n        vals.push(`${format(stats.numInfs)} ${infPct}`);\n    }\n    table_1.table(container, { headers, values: [vals] }, opts);\n}\n/**\n * Formats data to the internal format used by this chart.\n */\nfunction prepareData(data) {\n    if (data.length == null) {\n        throw new Error('input data must be an array');\n    }\n    if (data.length === 0) {\n        return [];\n    }\n    else if (typeof data[0] === 'object') {\n        if (data[0].value == null) {\n            throw new Error('input data must have a value field');\n        }\n        else {\n            return data;\n        }\n    }\n    else {\n        const ret = Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            ret[i] = { value: data[i] };\n        }\n        return ret;\n    }\n}\n"},"sourceMaps":{"js":{"version":3,"file":"histogram.js","sourceRoot":"","sources":["../../src/render/histogram.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {format as d3Format} from 'd3-format';\nimport embed, {Mode, VisualizationSpec} from 'vega-embed';\n\nimport {Drawable, HistogramOpts, HistogramStats, TypedArray} from '../types';\nimport {getDefaultHeight, getDefaultWidth, subSurface} from '../util/dom';\nimport {arrayStats} from '../util/math';\n\nimport {table} from './table';\n\nconst defaultOpts = {\n  maxBins: 12,\n  fontSize: 11,\n};\n\n/**\n * Renders a histogram of values\n *\n * ```js\n * const data = Array(100).fill(0)\n *   .map(x => Math.random() * 100 - (Math.random() * 50))\n *\n * // Push some special values for the stats table.\n * data.push(Infinity);\n * data.push(NaN);\n * data.push(0);\n *\n * const surface = { name: 'Histogram', tab: 'Charts' };\n * tfvis.render.histogram(surface, data);\n * ```\n */\n/** @doc {heading: 'Charts', namespace: 'render'} */\nexport async function histogram(\n    container: Drawable, data: Array<{value: number}>|number[]|TypedArray,\n    opts: HistogramOpts = {}) {\n  const values = prepareData(data);\n\n  const options = Object.assign({}, defaultOpts, opts);\n\n  const embedOpts = {\n    actions: false,\n    mode: 'vega-lite' as Mode,\n    defaultStyle: false,\n  };\n\n  const histogramContainer = subSurface(container, 'histogram');\n  if (opts.stats !== false) {\n    const statsContainer = subSurface(container, 'stats', {\n      prepend: true,\n    });\n    let stats: HistogramStats;\n\n    if (opts.stats) {\n      stats = opts.stats;\n    } else {\n      stats = arrayStats(values.map(x => x.value));\n    }\n    renderStats(stats, statsContainer, {fontSize: options.fontSize});\n  }\n\n  // If there are no data values return early\n  if (values.length === 0) {\n    return undefined;\n  }\n\n  // Now that we have rendered stats we need to remove any NaNs and Infinities\n  // before rendering the histogram\n  const filtered = [];\n  for (let i = 0; i < values.length; i++) {\n    const val = values[i].value;\n    if (val != null && isFinite(val)) {\n      filtered.push(values[i]);\n    }\n  }\n\n  const histogramSpec: VisualizationSpec = {\n\n    'width': options.width || getDefaultWidth(histogramContainer),\n    'height': options.height || getDefaultHeight(histogramContainer),\n    'padding': 0,\n    'autosize': {\n      'type': 'fit',\n      'contains': 'padding',\n      'resize': true,\n    },\n    'data': {'values': filtered},\n    'mark': {\n      'type': 'bar',\n      'tooltip': true,\n    },\n    'config': {\n      'axis': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      },\n      'text': {'fontSize': options.fontSize},\n      'legend': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      }\n    },\n    'encoding': {\n      'x': {\n        'bin': {'maxbins': options.maxBins},\n        'field': 'value',\n        'type': 'quantitative',\n      },\n      'y': {\n        'aggregate': 'count',\n        'type': 'quantitative',\n      },\n      'color': {\n        'value': options.color || '#001B44',\n      }\n    }\n  };\n\n  return embed(histogramContainer, histogramSpec, embedOpts);\n}\n\nfunction renderStats(\n    stats: HistogramStats, container: HTMLElement, opts: {fontSize: number}) {\n  const format = d3Format(',.4~f');\n  const pctFormat = d3Format('.4~p');\n\n  const headers: string[] = [];\n  const vals: string[] = [];\n\n  if (stats.numVals != null) {\n    headers.push('Num Vals');\n    vals.push(format(stats.numVals));\n  }\n\n  if (stats.min != null) {\n    headers.push('Min');\n    vals.push(format(stats.min));\n  }\n\n  if (stats.max != null) {\n    headers.push('Max');\n    vals.push(format(stats.max));\n  }\n\n  if (stats.numZeros != null) {\n    headers.push('# Zeros');\n    let zeroPct = '';\n    if (stats.numVals) {\n      zeroPct = stats.numZeros > 0 ?\n          `(${pctFormat(stats.numZeros / stats.numVals)})` :\n          '';\n    }\n\n    vals.push(`${format(stats.numZeros)} ${zeroPct}`);\n  }\n\n  if (stats.numNans != null) {\n    headers.push('# NaNs');\n    let nanPct = '';\n    if (stats.numVals) {\n      nanPct = stats.numNans > 0 ?\n          `(${pctFormat(stats.numNans / stats.numVals)})` :\n          '';\n    }\n\n    vals.push(`${format(stats.numNans)} ${nanPct}`);\n  }\n\n  if (stats.numInfs != null) {\n    headers.push('# Infinity');\n    let infPct = '';\n    if (stats.numVals) {\n      infPct = stats.numInfs > 0 ?\n          `(${pctFormat(stats.numInfs / stats.numVals)})` :\n          '';\n    }\n\n    vals.push(`${format(stats.numInfs)} ${infPct}`);\n  }\n\n  table(container, {headers, values: [vals]}, opts);\n}\n\n/**\n * Formats data to the internal format used by this chart.\n */\nfunction prepareData(data: Array<{value: number}>|number[]|\n                     TypedArray): Array<{value: number}> {\n  if (data.length == null) {\n    throw new Error('input data must be an array');\n  }\n\n  if (data.length === 0) {\n    return [];\n  } else if (typeof data[0] === 'object') {\n    if ((data[0] as {value: number}).value == null) {\n      throw new Error('input data must have a value field');\n    } else {\n      return data as Array<{value: number}>;\n    }\n  } else {\n    const ret = Array(data.length);\n    for (let i = 0; i < data.length; i++) {\n      ret[i] = {value: data[i]};\n    }\n    return ret;\n  }\n}\n"]}},"error":null,"hash":"e01ead28755b781a2463feac714c8b5d","cacheData":{"env":{}}}