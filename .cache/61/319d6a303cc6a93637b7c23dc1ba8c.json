{"id":"../node_modules/@tensorflow/tfjs-vis/dist/components/visor.js","dependencies":[{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\components\\visor.js.map","includedInParent":true,"mtime":1595569813578},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\package.json","includedInParent":true,"mtime":1595925880834},{"name":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\package.json","includedInParent":true,"mtime":1595569813578},{"name":"preact","loc":{"line":19,"column":25},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\components\\visor.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\preact\\dist\\preact.esm.js"},{"name":"glamor","loc":{"line":20,"column":25},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\components\\visor.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\glamor\\lib\\index.js"},{"name":"./surface","loc":{"line":21,"column":26},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\components\\visor.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\components\\surface.js"},{"name":"./tabs","loc":{"line":22,"column":23},"parent":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\components\\visor.js","resolved":"E:\\VisualStudioCodeProjects\\js机器学习\\node_modules\\@tensorflow\\tfjs-vis\\dist\\components\\tabs.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst preact_1 = require(\"preact\");\nconst glamor_1 = require(\"glamor\");\nconst surface_1 = require(\"./surface\");\nconst tabs_1 = require(\"./tabs\");\n/**\n * The Visor is a component that displays and manages 'Tabs' and 'Surfaces'.\n *\n * It is meant to exist as a singleton component on a given page and is thus\n * accessed by a visor() function that exposes a single instance of this\n * component via an imperative API (i.e. its implementation as a (p)react\n * component is an internal implementation detail.\n *\n * Following that, and somewhat unlike a typical react component, it does allow\n * for imperative calls to that instance to modify internal state. Any state\n * that needs to be serialized or persisted should be lifted to props.\n */\nclass VisorComponent extends preact_1.Component {\n    /**\n     * Helper function to render the component to the DOM.\n     *\n     * Note that although the visor has a parent element, it rendered via absolute\n     * positioning and is thus taken out of regular document flow.\n     *\n     * @param parent A DOM element\n     * @param replaceNode The element that re-rendering this component would\n     *                    replace. Usually null initially and will be returned by\n     *                    this function after the first render.\n     * @param props Initial visor props\n     */\n    static render(parent, replaceNode, props) {\n        return preact_1.render(preact_1.h(VisorComponent, Object.assign({}, props)), parent, replaceNode);\n    }\n    constructor(props) {\n        super(props);\n        this.surfaces = new Map();\n        const startOpen = props.startOpen == null ? true : props.startOpen;\n        this.state = {\n            isOpen: startOpen,\n            isFullscreen: false,\n            activeTab: null,\n            tabs: new Set()\n        };\n        this.keyHandler = this.keyHandler.bind(this);\n    }\n    // These public methods are exposed via an imperative interface\n    close() {\n        this.setState({ isOpen: false });\n    }\n    open() {\n        this.setState({ isOpen: true });\n    }\n    toggle() {\n        this.setState({ isOpen: !this.state.isOpen });\n    }\n    toggleFullScreen() {\n        this.setState({ isFullscreen: !this.state.isFullscreen });\n    }\n    isOpen() {\n        return this.state.isOpen;\n    }\n    isFullscreen() {\n        return this.state.isFullscreen;\n    }\n    getSurface(label, tab) {\n        const surfaceId = this.surfaceId(label, tab);\n        let surface;\n        if (this.surfaces.has(surfaceId)) {\n            surface = this.surfaces.get(surfaceId);\n        }\n        else {\n            throw Error(`Surface not found with id: ${surfaceId}`);\n        }\n        return {\n            container: surface.container,\n            label: surface.label,\n            drawArea: surface.drawArea,\n        };\n    }\n    bindKeys() {\n        document.addEventListener('keydown', this.keyHandler, false);\n    }\n    unbindKeys() {\n        document.removeEventListener('keydown', this.keyHandler);\n    }\n    surfaceId(label, tab) {\n        return label + tab;\n    }\n    setTabs(surfaceList) {\n        // Check if we have new tabs\n        const nextTabs = surfaceList.map(s => s.tab);\n        const tabs = this.state.tabs;\n        let newActiveTab;\n        for (const tab of nextTabs) {\n            if (!tabs.has(tab)) {\n                tabs.add(tab);\n                newActiveTab = tab;\n            }\n        }\n        if (newActiveTab != null) {\n            this.setState({\n                tabs,\n                activeTab: newActiveTab,\n            });\n        }\n    }\n    getTabs() {\n        return this.state.tabs;\n    }\n    // Event Handlers\n    registerSurface(name, tab, surface) {\n        const surfaceId = this.surfaceId(name, tab);\n        this.surfaces.set(surfaceId, surface);\n    }\n    keyHandler(event) {\n        const BACKTICK_KEY = 192;\n        if (event.keyCode === BACKTICK_KEY) {\n            if (event.shiftKey) {\n                this.toggleFullScreen();\n            }\n            else {\n                this.toggle();\n            }\n        }\n    }\n    setActiveTab(tab) {\n        this.setState({ activeTab: tab });\n    }\n    // Lifecycle Methods\n    componentDidMount() {\n        this.bindKeys();\n    }\n    componentWillMount() {\n        this.setTabs(this.props.surfaceList);\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setTabs(nextProps.surfaceList);\n    }\n    render() {\n        const { isOpen, isFullscreen, activeTab } = this.state;\n        const { surfaceList } = this.props;\n        const tabNames = Array.from(this.getTabs().values());\n        const SMALL_WIDTH = '550px';\n        const LARGE_WIDTH = '90vw';\n        const width = isFullscreen ? LARGE_WIDTH : SMALL_WIDTH;\n        const defaultStyles = glamor_1.css({\n            width,\n            height: '100%',\n            backgroundColor: '#fafafa',\n            boxSizing: 'border-box',\n            padding: '10px',\n            position: 'fixed',\n            top: '0px',\n            // tslint:disable-next-line\n            transition: `right 0.5s cubic-bezier(0.645, 0.045, 0.355, 1), width 0.5s cubic-bezier(0.645, 0.045, 0.355, 1)`,\n            boxShadow: '0 2px 5px rgba(0, 0, 0, 0.12), 0 2px 5px rgba(0, 0, 0, 0.24)',\n            overflow: 'auto',\n            fontFamily: 'sans-serif',\n            fontSize: '14px',\n            zIndex: 1000,\n        });\n        const openStyle = glamor_1.css({ right: '0' });\n        const closedStyle = glamor_1.css({ right: `calc(-${width} - 10px)` });\n        const position = isOpen ? openStyle : closedStyle;\n        // TODO. Add flex wrapping for surfaces\n        const surfacesContainerStyle = glamor_1.css({});\n        return (preact_1.h(\"div\", { className: `${defaultStyles} ${position} visor`, \"data-isopen\": isOpen, \"data-isfullscreen\": isFullscreen },\n            preact_1.h(VisorControls, { fullScreenHandler: this.toggleFullScreen.bind(this), closeHandler: this.close.bind(this), isFullScreen: isFullscreen }),\n            preact_1.h(tabs_1.Tabs, { tabNames: tabNames, activeTab: activeTab, handleClick: this.setActiveTab.bind(this) }),\n            preact_1.h(\"div\", { className: `${surfacesContainerStyle} visor-surfaces` }, surfaceList.map((surfaceInfo) => (preact_1.h(surface_1.SurfaceComponent, { key: surfaceInfo.name + surfaceInfo.tab, name: surfaceInfo.name, tab: surfaceInfo.tab, styles: surfaceInfo.styles, registerSurface: this.registerSurface.bind(this), visible: activeTab === surfaceInfo.tab }))))));\n    }\n}\nexports.VisorComponent = VisorComponent;\nfunction VisorControls(props) {\n    const { isFullScreen, fullScreenHandler, closeHandler } = props;\n    const toolBarStyle = glamor_1.css({\n        display: 'flex',\n        backgroundColor: 'white',\n        border: '1px solid white',\n        padding: '6px',\n        paddingTop: '10px',\n        marginBottom: '10px',\n        borderRadius: '6px',\n        marginTop: '-16px'\n    });\n    const controlsButtonClass = glamor_1.css({\n        fontSize: '.875rem',\n        borderRadius: '.25rem',\n        paddingLeft: '1rem',\n        paddingRight: '1rem',\n        paddingTop: '.5rem',\n        paddingBottom: '.5rem',\n        textDecoration: 'none',\n        transition: 'color .15s ease-in',\n        color: '#111',\n    });\n    const floatRight = glamor_1.css({\n        marginLeft: 'auto',\n    });\n    return (preact_1.h(\"div\", { className: `${toolBarStyle} visor-controls` },\n        preact_1.h(\"button\", { className: `${controlsButtonClass}`, onClick: fullScreenHandler }, isFullScreen ? 'Minimize' : 'Maximize'),\n        preact_1.h(\"button\", { className: `${controlsButtonClass} ${floatRight}`, onClick: closeHandler }, \"Hide\")));\n}\n"},"sourceMaps":{"js":{"version":3,"file":"visor.js","sourceRoot":"","sources":["../../src/components/visor.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,mCAA8C;AAC9C,mCAA6B;AAE7B,uCAA6C;AAC7C,iCAA8B;AAsB9B;;;;;;;;;;;GAWG;AACH,MAAa,cAAe,SAAQ,kBAAiC;IAEnE;;;;;;;;;;;OAWG;IACH,MAAM,CAAC,MAAM,CACX,MAAe,EACf,WAAoB,EACpB,KAAiB;QACjB,OAAO,eAAM,CACX,WAAC,cAAc,oBACT,KAAK,EACT,EACF,MAAM,EACN,WAAW,CACZ,CAAC;IACJ,CAAC;IAKD,YAAY,KAAiB;QAC3B,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAA4B,CAAC;QACpD,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;QAEnE,IAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,SAAS;YACjB,YAAY,EAAE,KAAK;YACnB,SAAS,EAAE,IAAI;YACf,IAAI,EAAE,IAAI,GAAG,EAAU;SACxB,CAAC;QAEF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,+DAA+D;IAE/D,KAAK;QACH,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,IAAI;QACF,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAClC,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC3B,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;IACjC,CAAC;IAED,UAAU,CAAC,KAAa,EAAE,GAAW;QACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC7C,IAAI,OAAyB,CAAC;QAE9B,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAChC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;SACxC;aAAM;YACL,MAAM,KAAK,CAAC,8BAA8B,SAAS,EAAE,CAAC,CAAC;SACxD;QAED,OAAO;YACL,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,QAAQ,EAAE,OAAO,CAAC,QAAQ;SAC3B,CAAC;IACJ,CAAC;IAED,QAAQ;QACN,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC/D,CAAC;IAED,UAAU;QACR,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;IAEO,SAAS,CAAC,KAAa,EAAE,GAAW;QAC1C,OAAO,KAAK,GAAG,GAAG,CAAC;IACrB,CAAC;IAEO,OAAO,CAAC,WAAgC;QAC9C,4BAA4B;QAC5B,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAC7B,IAAI,YAAY,CAAC;QACjB,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAClB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACd,YAAY,GAAG,GAAG,CAAC;aACpB;SACF;QAED,IAAI,YAAY,IAAI,IAAI,EAAE;YACxB,IAAI,CAAC,QAAQ,CAAC;gBACZ,IAAI;gBACJ,SAAS,EAAE,YAAY;aACxB,CAAC,CAAC;SACJ;IACH,CAAC;IAEO,OAAO;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;IAED,iBAAiB;IAET,eAAe,CAAC,IAAY,EAAE,GAAW,EAC/C,OAAyB;QACzB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAEO,UAAU,CAAC,KAAoB;QACrC,MAAM,YAAY,GAAG,GAAG,CAAC;QAEzB,IAAI,KAAK,CAAC,OAAO,KAAK,YAAY,EAAE;YAClC,IAAI,KAAK,CAAC,QAAQ,EAAE;gBAClB,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB;iBAAM;gBACL,IAAI,CAAC,MAAM,EAAE,CAAC;aACf;SACF;IACH,CAAC;IAEO,YAAY,CAAC,GAAW;QAC9B,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;IACpC,CAAC;IAED,oBAAoB;IAEpB,iBAAiB;QACf,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAED,yBAAyB,CAAC,SAAqB;QAC7C,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACvD,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACnC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;QAErD,MAAM,WAAW,GAAG,OAAO,CAAC;QAC5B,MAAM,WAAW,GAAG,MAAM,CAAC;QAE3B,MAAM,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC;QAEvD,MAAM,aAAa,GAAG,YAAG,CAAC;YACxB,KAAK;YACL,MAAM,EAAE,MAAM;YACd,eAAe,EAAE,SAAS;YAC1B,SAAS,EAAE,YAAY;YACvB,OAAO,EAAE,MAAM;YACf,QAAQ,EAAE,OAAO;YACjB,GAAG,EAAE,KAAK;YACV,2BAA2B;YAC3B,UAAU,EAAE,kGAAkG;YAC9G,SAAS,EAAE,8DAA8D;YACzE,QAAQ,EAAE,MAAM;YAChB,UAAU,EAAE,YAAY;YACxB,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,YAAG,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;QAEtC,MAAM,WAAW,GAAG,YAAG,CAAC,EAAE,KAAK,EAAE,SAAS,KAAK,UAAU,EAAE,CAAC,CAAC;QAC7D,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC;QAElD,uCAAuC;QACvC,MAAM,sBAAsB,GAAG,YAAG,CAAC,EAAE,CAAC,CAAC;QAEvC,OAAO,CACL,oBACE,SAAS,EAAE,GAAG,aAAa,IAAI,QAAQ,QAAQ,iBAClC,MAAM,uBACA,YAAY;YAG/B,WAAC,aAAa,IACZ,iBAAiB,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EACnD,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EACnC,YAAY,EAAE,YAAY,GAC1B;YAEF,WAAC,WAAI,IACH,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,EACpB,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GACzC;YAKF,oBAAK,SAAS,EAAE,GAAG,sBAAsB,iBAAiB,IAEtD,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAC/B,WAAC,0BAAgB,IACf,GAAG,EAAE,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,GAAG,EACvC,IAAI,EAAE,WAAW,CAAC,IAAI,EACtB,GAAG,EAAE,WAAW,CAAC,GAAG,EACpB,MAAM,EAAE,WAAW,CAAC,MAAM,EAC1B,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAChD,OAAO,EAAE,SAAS,KAAK,WAAW,CAAC,GAAG,GACtC,CACH,CAAC,CAEA,CAED,CACR,CAAC;IACJ,CAAC;CACF;AA7OD,wCA6OC;AAYD,SAAS,aAAa,CAAC,KAAwB;IAC7C,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;IAEhE,MAAM,YAAY,GAAG,YAAG,CAAC;QACvB,OAAO,EAAE,MAAM;QACf,eAAe,EAAE,OAAO;QACxB,MAAM,EAAE,iBAAiB;QACzB,OAAO,EAAE,KAAK;QACd,UAAU,EAAE,MAAM;QAClB,YAAY,EAAE,MAAM;QACpB,YAAY,EAAE,KAAK;QACnB,SAAS,EAAE,OAAO;KACnB,CAAC,CAAC;IAEH,MAAM,mBAAmB,GAAG,YAAG,CAAC;QAC9B,QAAQ,EAAE,SAAS;QACnB,YAAY,EAAE,QAAQ;QACtB,WAAW,EAAE,MAAM;QACnB,YAAY,EAAE,MAAM;QACpB,UAAU,EAAE,OAAO;QACnB,aAAa,EAAE,OAAO;QACtB,cAAc,EAAE,MAAM;QACtB,UAAU,EAAE,oBAAoB;QAChC,KAAK,EAAE,MAAM;KACd,CAAC,CAAC;IAEH,MAAM,UAAU,GAAG,YAAG,CAAC;QACrB,UAAU,EAAE,MAAM;KACnB,CAAC,CAAC;IAEH,OAAO,CACL,oBAAK,SAAS,EAAE,GAAG,YAAY,iBAAiB;QAC9C,uBAAQ,SAAS,EAAE,GAAG,mBAAmB,EAAE,EAAE,OAAO,EAAE,iBAAiB,IACpE,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAChC;QAET,uBACE,SAAS,EAAE,GAAG,mBAAmB,IAAI,UAAU,EAAE,EACjD,OAAO,EAAE,YAAY,WAGd,CACL,CACP,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { h, Component, render } from 'preact';\nimport { css } from 'glamor';\n\nimport { SurfaceComponent } from './surface';\nimport { Tabs } from './tabs';\n\nimport { SurfaceInfoStrict } from '../types';\n\ninterface VisorProps {\n  // An ordered list of surfaces to render. These are specified by SurfaceInfo\n  // objects that allow configuration of the surface. The actual surface\n  // instance is managed by the visor.\n  surfaceList: SurfaceInfoStrict[];\n  // Whether to inialize the visor to the open or closed state. Optional.\n  startOpen?: boolean;\n  // A ref handler\n  ref?: (r: VisorComponent) => void;\n}\n\ninterface VisorState {\n  isOpen: boolean;\n  isFullscreen: boolean;\n  activeTab: string | null;\n  tabs: Set<string>;\n}\n\n/**\n * The Visor is a component that displays and manages 'Tabs' and 'Surfaces'.\n *\n * It is meant to exist as a singleton component on a given page and is thus\n * accessed by a visor() function that exposes a single instance of this\n * component via an imperative API (i.e. its implementation as a (p)react\n * component is an internal implementation detail.\n *\n * Following that, and somewhat unlike a typical react component, it does allow\n * for imperative calls to that instance to modify internal state. Any state\n * that needs to be serialized or persisted should be lifted to props.\n */\nexport class VisorComponent extends Component<VisorProps, VisorState> {\n\n  /**\n   * Helper function to render the component to the DOM.\n   *\n   * Note that although the visor has a parent element, it rendered via absolute\n   * positioning and is thus taken out of regular document flow.\n   *\n   * @param parent A DOM element\n   * @param replaceNode The element that re-rendering this component would\n   *                    replace. Usually null initially and will be returned by\n   *                    this function after the first render.\n   * @param props Initial visor props\n   */\n  static render(\n    parent: Element,\n    replaceNode: Element,\n    props: VisorProps): Element {\n    return render(\n      <VisorComponent\n        {...props}\n      />,\n      parent,\n      replaceNode\n    );\n  }\n\n  // Lookup dictionary for Surfaces\n  private surfaces: Map<string, SurfaceComponent>;\n\n  constructor(props: VisorProps) {\n    super(props);\n    this.surfaces = new Map<string, SurfaceComponent>();\n    const startOpen = props.startOpen == null ? true : props.startOpen;\n\n    this.state = {\n      isOpen: startOpen,\n      isFullscreen: false,\n      activeTab: null,\n      tabs: new Set<string>()\n    };\n\n    this.keyHandler = this.keyHandler.bind(this);\n  }\n\n  // These public methods are exposed via an imperative interface\n\n  close() {\n    this.setState({ isOpen: false });\n  }\n\n  open() {\n    this.setState({ isOpen: true });\n  }\n\n  toggle() {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  toggleFullScreen() {\n    this.setState({ isFullscreen: !this.state.isFullscreen });\n  }\n\n  isOpen(): boolean {\n    return this.state.isOpen;\n  }\n\n  isFullscreen(): boolean {\n    return this.state.isFullscreen;\n  }\n\n  getSurface(label: string, tab: string) {\n    const surfaceId = this.surfaceId(label, tab);\n    let surface: SurfaceComponent;\n\n    if (this.surfaces.has(surfaceId)) {\n      surface = this.surfaces.get(surfaceId);\n    } else {\n      throw Error(`Surface not found with id: ${surfaceId}`);\n    }\n\n    return {\n      container: surface.container,\n      label: surface.label,\n      drawArea: surface.drawArea,\n    };\n  }\n\n  bindKeys() {\n    document.addEventListener('keydown', this.keyHandler, false);\n  }\n\n  unbindKeys() {\n    document.removeEventListener('keydown', this.keyHandler);\n  }\n\n  private surfaceId(label: string, tab: string): string {\n    return label + tab;\n  }\n\n  private setTabs(surfaceList: SurfaceInfoStrict[]) {\n    // Check if we have new tabs\n    const nextTabs = surfaceList.map(s => s.tab);\n    const tabs = this.state.tabs;\n    let newActiveTab;\n    for (const tab of nextTabs) {\n      if (!tabs.has(tab)) {\n        tabs.add(tab);\n        newActiveTab = tab;\n      }\n    }\n\n    if (newActiveTab != null) {\n      this.setState({\n        tabs,\n        activeTab: newActiveTab,\n      });\n    }\n  }\n\n  private getTabs(): Set<string> {\n    return this.state.tabs;\n  }\n\n  // Event Handlers\n\n  private registerSurface(name: string, tab: string,\n    surface: SurfaceComponent) {\n    const surfaceId = this.surfaceId(name, tab);\n    this.surfaces.set(surfaceId, surface);\n  }\n\n  private keyHandler(event: KeyboardEvent) {\n    const BACKTICK_KEY = 192;\n\n    if (event.keyCode === BACKTICK_KEY) {\n      if (event.shiftKey) {\n        this.toggleFullScreen();\n      } else {\n        this.toggle();\n      }\n    }\n  }\n\n  private setActiveTab(tab: string) {\n    this.setState({ activeTab: tab });\n  }\n\n  // Lifecycle Methods\n\n  componentDidMount() {\n    this.bindKeys();\n  }\n\n  componentWillMount() {\n    this.setTabs(this.props.surfaceList);\n  }\n\n  componentWillReceiveProps(nextProps: VisorProps) {\n    this.setTabs(nextProps.surfaceList);\n  }\n\n  render() {\n    const { isOpen, isFullscreen, activeTab } = this.state;\n    const { surfaceList } = this.props;\n    const tabNames = Array.from(this.getTabs().values());\n\n    const SMALL_WIDTH = '550px';\n    const LARGE_WIDTH = '90vw';\n\n    const width = isFullscreen ? LARGE_WIDTH : SMALL_WIDTH;\n\n    const defaultStyles = css({\n      width,\n      height: '100%',\n      backgroundColor: '#fafafa',\n      boxSizing: 'border-box',\n      padding: '10px',\n      position: 'fixed',\n      top: '0px',\n      // tslint:disable-next-line\n      transition: `right 0.5s cubic-bezier(0.645, 0.045, 0.355, 1), width 0.5s cubic-bezier(0.645, 0.045, 0.355, 1)`,\n      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.12), 0 2px 5px rgba(0, 0, 0, 0.24)',\n      overflow: 'auto',\n      fontFamily: 'sans-serif',\n      fontSize: '14px',\n      zIndex: 1000,\n    });\n\n    const openStyle = css({ right: '0' });\n\n    const closedStyle = css({ right: `calc(-${width} - 10px)` });\n    const position = isOpen ? openStyle : closedStyle;\n\n    // TODO. Add flex wrapping for surfaces\n    const surfacesContainerStyle = css({});\n\n    return (\n      <div\n        className={`${defaultStyles} ${position} visor`}\n        data-isopen={isOpen}\n        data-isfullscreen={isFullscreen}\n      >\n        {/* Controls  */}\n        <VisorControls\n          fullScreenHandler={this.toggleFullScreen.bind(this)}\n          closeHandler={this.close.bind(this)}\n          isFullScreen={isFullscreen}\n        />\n        {/* Tabs */}\n        <Tabs\n          tabNames={tabNames}\n          activeTab={activeTab}\n          handleClick={this.setActiveTab.bind(this)}\n        />\n\n        {/* Surfaces */}\n        {/* Note that we 'render' all surfaces so they can be added\n            to the DOM regardless of whether they are currently visible */}\n        <div className={`${surfacesContainerStyle} visor-surfaces`} >\n          {\n            surfaceList.map((surfaceInfo) => (\n              <SurfaceComponent\n                key={surfaceInfo.name + surfaceInfo.tab}\n                name={surfaceInfo.name}\n                tab={surfaceInfo.tab}\n                styles={surfaceInfo.styles}\n                registerSurface={this.registerSurface.bind(this)}\n                visible={activeTab === surfaceInfo.tab}\n              />\n            ))\n          }\n        </div>\n\n      </div >\n    );\n  }\n}\n\n//\n// Helper Components\n//\n\ninterface VisorControlProps {\n  fullScreenHandler: () => void;\n  closeHandler: () => void;\n  isFullScreen: boolean;\n}\n\nfunction VisorControls(props: VisorControlProps) {\n  const { isFullScreen, fullScreenHandler, closeHandler } = props;\n\n  const toolBarStyle = css({\n    display: 'flex',\n    backgroundColor: 'white',\n    border: '1px solid white',\n    padding: '6px',\n    paddingTop: '10px',\n    marginBottom: '10px',\n    borderRadius: '6px',\n    marginTop: '-16px'\n  });\n\n  const controlsButtonClass = css({\n    fontSize: '.875rem',\n    borderRadius: '.25rem',\n    paddingLeft: '1rem',\n    paddingRight: '1rem',\n    paddingTop: '.5rem',\n    paddingBottom: '.5rem',\n    textDecoration: 'none',\n    transition: 'color .15s ease-in',\n    color: '#111',\n  });\n\n  const floatRight = css({\n    marginLeft: 'auto',\n  });\n\n  return (\n    <div className={`${toolBarStyle} visor-controls`}>\n      <button className={`${controlsButtonClass}`} onClick={fullScreenHandler}>\n        {isFullScreen ? 'Minimize' : 'Maximize'}\n      </button>\n\n      <button\n        className={`${controlsButtonClass} ${floatRight}`}\n        onClick={closeHandler}\n      >\n        Hide\n      </button>\n    </div>\n  );\n}\n"]}},"error":null,"hash":"75f5e662739a4b48d8f91c4bf979876c","cacheData":{"env":{}}}